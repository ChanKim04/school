Script started on Mon 27 Mar 2017 08:36:46 PM EDT
ck45@vonneumann:~/workspace/112/proj06$ ls
CongaLine.cpp  List.h		  ListTest2.txt   main.cpp
CongaLine.h    ListTest1Copy.txt  ListTester.cpp  tester.cpp
Debug	       ListTest1.txt	  ListTester.h	  typescript
ck45@vonneumann:~/workspace/112/proj06$ cat main.cpp
/* main.cpp is the driver for a Conga line simulation.
 *
 * @author: Joel Adams, for CS 112 at Calvin College.
 *
 * Based on an exercise by Marc LeBlanc from Wheaton College (MS).
 */

#include "CongaLine.h"

int main() {
	CongaLine dance("Ann", "Bob");
	dance.run();
}
ck45@vonneumann:~/workspace/112/proj06$ cat con   CongaLine.h
/* CongaLine.h declares class CongaLine,
 *  a Conga line dance simulation.
 *
 * @author: Joel Adams, for CS 112 at Calvin College.
 *
 * Based on an exercise by Marc LeBlanc from Wheaton College (MS).
 */


#ifndef CONGALINE_H_
#define CONGALINE_H_

#include "List.h"
#include <string>
using namespace std;

class CongaLine {
public:
	CongaLine(const string& person1, const string& person2);
	void run();

private:
	List<string> myLine;

	string MY_MENU;
	string myFirstPerson;
	string mySecondPerson;
};

#endif /* CONGALINE_H_ */
ck45@vonneumann:~/workspace/112/proj06$ cat CongaLine.cpp
/* CongaLine.cpp defines the methods for class CongaLine.
 *
 * @author: Joel Adams, for CS 112 at Calvin College.
 *
 * Based on an exercise by Marc LeBlanc from Wheaton College (MS).
 */

#include "CongaLine.h"

/* The CongaLine constructor
 * @param: person1, a string
 * @param: person2, a string
 * Postcondition: myFirstPerson == person1
 *             && mySecondPerson == person2
 *             && person1 is the first Item in myLine
 *             && person2 is the second Item in myLine
 *             && MY_MENU has been initialized.
 */
CongaLine::CongaLine(const string& person1, const string& person2) {
	myLine.append(person1);
	myLine.append(person2);
	myFirstPerson = person1;
	mySecondPerson = person2;
	MY_MENU = string("Please enter:\n")
				    + " 1 to join the Conga line at the end\n"
					+ " 2 to join the Conga line after a particular person\n"
					+ " 3 to join the Conga line before a particular person\n"
					+ " 4 to quit\n"
					+ "--> ";
}

/* Method to run the CongaLine simulation,
 *  prompting the user via cout
 *  and reading the user's input via cin.
 */
void CongaLine::run() {
	unsigned menuChoice = 0;
	string yourName, otherPersonsName;
	cout << myFirstPerson << " and " << mySecondPerson
			<< " have started a Conga Line!" << endl;

	while (menuChoice != 4) {
		cout << "\n " << myLine << "\n\n";
		cout << "\n"; myLine.writeTo(cout); cout << "\n\n";
		cout << "Conga, Conga, Con-GA!  Conga, Conga, Con-GA!\n" << endl;
		cout << MY_MENU;
		cin >> menuChoice;
		if (menuChoice == 1 || menuChoice == 2 || menuChoice == 3) {
			cout << "\nWhat is your name? ";
			cin >> yourName;
		}

		switch( menuChoice ) {
		case 1:
			myLine.append(yourName);
			break;
		case 2:
			cout << "Who do you want to follow? ";
			cin >> otherPersonsName;
			if ( !myLine.insertAfter(otherPersonsName, yourName) ) {
				cout << "\n***" << otherPersonsName
					 << " is not dancing!\n" << endl;
			}
			break;
		case 3:
			cout << "Who do you want to precede? ";
			cin >> otherPersonsName;
			if ( !myLine.insertBefore(otherPersonsName, yourName) ) {
				cout << "\n***" << otherPersonsName
					 << " is not dancing!\n" << endl;
			}
			break;
		default:
			cout << "\n*** " << menuChoice
			     << " is not a valid choice!\n" << endl;
		}
	}
}
ck45@vonneumann:~/workspace/112/proj06$ cat List.h
/*
 * List.h
 * Student: Chan Kim (ck45)
 * Date: March 27, 2017
 *
 * based on proj05 by
 * Seth Galyon wrote: operator!=(), writeTo(ostream), readFrom(string), getIndexOf(Item), remove(index)
 * Chan Kim wrote: operator==(), readFrom(istream), writeTo(string), prepend(item), insert(item, index)
 */

#ifndef LIST_H_
#define LIST_H_
#include <iostream>
#include <stdexcept>
#include <cstdlib>
#include <fstream>
#include <ostream>
#include <cassert>
using namespace std;

template<class Item>


class List {
public:
	List();
	unsigned getSize() const{return mySize;};
	Item getFirst() const;
	Item getLast() const;
	void append(const Item& it);
	virtual ~List();
	List(const List<Item>& original);
	List<Item>& operator=(const List<Item>& original);

	bool operator==(const List<Item>& l2);
	void readFrom(istream& in);
	void writeTo(const string& fileName) const;
	void prepend(const Item& it);
	void insert(const Item& it, unsigned index);

	bool operator!=(const List<Item>& l2);
	void writeTo(ostream& out, const string& separator = "\t") const ;
	void readFrom(const string& fileName);
	int getIndexOf(const Item& it);
	Item remove(double index);
	bool insertAfter(const Item& otherPersonsName, const Item& yourName);
	bool insertBefore(const Item& otherPersonsName, const Item& yourName);

private:
	struct Node {
		Node();
		Node(const Item& item, Node* next);
		virtual ~Node();
		Item myItem;
		Node* myNext;
	};
	unsigned mySize;
	Node* myFirst;
	Node* myLast;
	friend class ListTester;

};

/* List default constructor
 * Postcondition: mySize == 0
 * 					myFirst and myLast == NULL
 */
template<class Item>
List<Item>::List() {
	mySize = 0;
	myFirst = myLast = NULL;
}

/* Node default constructor
 * Postcondition: myItem == Item()
 * 					myNext == NULL
 */
template<class Item>
List<Item>::Node::Node() {
	myItem = Item();
	myNext = NULL;
}

/* Explicit constructor
 * Parameter: item, Item
 * 			  next, Node
 * Postcondition: myItem == item
 * 				  myNext == next
 */
template<class Item>
List<Item>::Node::Node(const Item& item, Node* next) {
	myItem = item;
	myNext = next;
}

/* Get first
 * Postcondition: return the first item
 */
template<class Item>
Item List<Item>::getFirst() const {
	if (mySize < 0 || myFirst == NULL){
		throw underflow_error("invalid list");
	} else {
		return myFirst -> myItem;
	}
}

/* Get last
 * Postcondition: return the last item
 */
template<class Item>
Item List<Item>::getLast() const {
	if (mySize < 0 || myLast == NULL){
		throw underflow_error("invalid list");
	} else {
		return myLast -> myItem;
	}
}

/* Append an item
 * Parameter: it, Item
 * Postcondition: appends an item on the list
 */
template<class Item>
void List<Item>::append(const Item& it){
	Node * nodePtr = new Node(it,NULL);
	if (mySize == 0){
		myFirst = nodePtr;
	} else {
		myLast -> myNext = nodePtr;
	}
	myLast = nodePtr;
	mySize ++;
}

template<class Item>
List<Item>::~List() {
	delete myFirst;          // delete first node, invoking ~Node() (does nothing if myFirst == NULL)
	myFirst = myLast = NULL; // clear myFirst and myLast (optional)
	mySize = 0;
}

template<class Item>
List<Item>::Node::~Node() {
	//cout << "~Node() is deallocating the node containing item "
	//     << myItem << endl;
	delete myNext;       // delete the next node, invoking ~Node() in it
                         // (does nothing if myNext == NULL)
}

template<class Item>
List<Item>::List(const List<Item>& original) {
	myFirst = myLast = NULL;          //  set pointers
    mySize = 0;                       //   and size to 'empty' values
    if (original.getSize() > 0) {     //  if there are nodes to copy:
    	Node* oPtr = original.myFirst; //  start at the first node
        while (oPtr != NULL) {         //  while there are more nodes:
           append(oPtr->myItem);       //   append the item in that node
           oPtr = oPtr->myNext;        //   advance to next node
        }
     }
}

template<class Item>
List<Item>& List<Item>::operator=(const List<Item>& original){
	if (this != &original) {			  //  If original and I are two distinct lists
		this -> ~List();				  //  Deallocate my chain of nodes.
		myFirst = myLast = NULL;          //  set pointers
		mySize = 0;						  //   and size to 'empty' values
		if (original.getSize() > 0) {     //  if there are nodes to copy:
		    	Node* nPtr = original.myFirst; //  start at the first node
		        while (nPtr != NULL) {         //  while there are more nodes:
		           append(nPtr->myItem);       //   append the item in that node
		           nPtr = nPtr->myNext;
		        }
		}
	}
	return *this;
}

/* boolean equality
 * Parameter: l2, a List
 * Postcondition: true is returned, if and only if
 * 					mySize == l2.mySize
 * 					myPtr->myItem == l2Ptr->myItem)
 * 					my values are same to l2's values.
 */
template<class Item>
bool List<Item>::operator==(const List<Item>& l2) {
	if (mySize != l2.mySize) {
		return false;
	}	else if (mySize == l2.mySize) {
		Node* myPtr = myFirst;
		Node* l2Ptr = l2.myFirst;
		for (unsigned i = 0; i < mySize; i++) {
			if ((myPtr->myItem) != (l2Ptr->myItem)) {
			return false;
			}
			myPtr = myPtr->myNext;
			l2Ptr = l2Ptr->myNext;
		}
	}
	return true;
}

/* List input method
 * Parameter: in, an istream
 * Precondition: in contains items for a List
 * Postcondition: Items have been read from in
 */
template<class Item>
void List<Item>::readFrom(istream& in) {
	if (mySize != 0) {
		delete myFirst;
		myFirst = myLast = NULL;
		mySize = 0;
	}
	string line;
	getline(in, line);
	double start;
	start = 0;
	for (unsigned i = 0; i <= line.length(); i++){
		if (line[i]== ' ') {
			Item item = atof(line.substr(start,i).c_str());
			append(item);
			start = i+1;
		}
	}
	Item item = atof(line.substr(start,line.length()).c_str());
	append(item);
}

/* File Output
 * Parameter: fileName, a string
 * Precondition: exports the values of the List
 */
template<class Item>
void List<Item>::writeTo(const string& fileName) const {
	ofstream fout(fileName.c_str());
	assert( fout.is_open() );
	Node* myPtr = myFirst;
	for (unsigned i = 0; i < mySize-1; i++) {
		fout << myPtr->myItem << ' ';
		myPtr = myPtr->myNext;
	}
	fout << myPtr->myItem << '\n';
	fout.close();
}

/* Prepend an item
 * Parameter: it, Item
 * Postcondition: prepends an item on the list
 */
template<class Item>
void List<Item>::prepend(const Item& it) {
	Node * nodePtr = new Node(it, myFirst);
	if (mySize == 0) {
		myLast = nodePtr;
	}
	myFirst = nodePtr;
	mySize++;
}

/* Insert an item
 * Parameter: it, Item
 * 			  index, unsigned
 * Postcondition: inserts an item into the list at index
 */
template<class Item>
void List<Item>::insert(const Item& it, unsigned index) {
	if (mySize == 0) {
		append(it);
	} else if (index == 0) {
		prepend(it);
	} else if (index >= mySize) {
		append(it);
	} else {
		Node * nodePtr1 = new Node(it, NULL);
		Node * nodePtr2 = myFirst;
		for (unsigned i = 0; i < index; i++) {
			if (i == index -1) {
				nodePtr1->myNext = nodePtr2->myNext;
				nodePtr2->myNext = nodePtr1;
			}
		}
		mySize++;
	}
}

/* boolean equality
 * Parameter: l2, a List
 * Postcondition: true is returned, if and only if
 * 					mySize != l2.mySize
 * 					myPtr->myItem != l2Ptr->myItem)
 * 					my values are different than l2's values.
 */
template<class Item>
bool List<Item>::operator!=(const List<Item>& l2) {
	if (mySize == l2.mySize) {
		Node* myPtr = myFirst;
		Node* l2Ptr = l2.myFirst;
		for (unsigned i = 0; i < mySize; i++) {
			if ((myPtr->myItem) != (l2Ptr->myItem)) {return true;}
			myPtr = myPtr->myNext;
			l2Ptr = l2Ptr->myNext;
		}
		return false;
	}
	return true;
}

/* List output method
 * Parameter: out, an ostream, separator, a string
 * Postcondition: Items have been put in ostream
 */
template<class Item>
void List<Item>::writeTo(ostream& out, const string& separator) const {
	for (Node* myPtr = myFirst; myPtr; myPtr = myPtr -> myNext){
		out << myPtr->myItem;
		if (myPtr -> myNext)
			out << separator;
	}
}

/* List read method
 * Parameter: filename, a string
 * Precondition: file contains items for a List
 * Postcondition: Items have been read from file
 */
template<class Item>
void List<Item>::readFrom(const string& fileName) {
	if (mySize != 0) {
		delete myFirst;
		myFirst = myLast = NULL;
		mySize = 0;
	}

	ifstream fin(fileName.c_str());
	assert( fin.is_open() );

	Item value;

	while( fin >> value ) {
		append( value );
		if( fin.peek() == '\n' ) {
			break;
		}
	}
}

/* get index of item in list
 * Parameter: index, a unsigned
 * Postcondition: index of item is returned if item is not in list, returns -1
 */
template<class Item>
int List<Item>::getIndexOf(const Item& it) {
	Node* myPtr = myFirst;
	for( unsigned i = 0; i < mySize; i++) {
		if ( myPtr->myItem == it) {
			return i;
		}
		myPtr  = myPtr->myNext;
	}
	return -1;
}

/* remove index of item in list
 * Parameter: index, a double
 * Postcondition: remove an index of item in list, and return an item value
 */
template<class Item>
Item List<Item>::remove(double index) {
	Node* ptr = myFirst;
	Item value;
	if (mySize == 0) {
		return 0;
	}
	if (index <= 0) {
		value = myFirst->myItem;
		myFirst = myFirst->myNext;
		ptr->myNext = NULL;
		delete ptr;
		mySize--;
		return value;
	} else if (index >= mySize - 1) {
		Node* bptr = myFirst;
		for( unsigned i = 0; i < (mySize - 2); i++ ) {
			bptr = bptr->myNext;
		}
		ptr = myLast;
		value = ptr->myItem;
		bptr->myNext = NULL;
		myLast = bptr;
		delete ptr;
		mySize--;
		return value;
	} else {
		Node* bptr = myFirst;
		for( unsigned i = 0; i < (index - 1); i++ ) {
			bptr = bptr->myNext;
		}
		ptr = bptr->myNext;
		value = ptr->myItem;
		bptr->myNext = ptr->myNext;
		ptr->myNext = NULL;
		delete ptr;
		mySize--;
		return value;
	}
}
/* boolean insertAfter
 * Parameter: otherPersonsName and yourName, an Item
 * Postcondition: true is returned, if and only if
 * 					getIndexOf(otherPersonsName) != -1
 * 					otherPersonsName is in the List
 * 					And insert an Item yourName after otherPersonsName
 */
template<class Item>
bool List<Item>::insertAfter(const Item& otherPersonsName, const Item& yourName) {
	int index = getIndexOf(otherPersonsName);
	if (index == -1) {
		return false;
	} else {
		if (otherPersonsName == getLast()) {
			append(yourName);
		} else {
			Node * nodePtr1 = new Node(yourName, NULL);
			Node * nodePtr2 = myFirst;
			for (int i = 0; i < index; i++) {
				nodePtr2 = nodePtr2->myNext;
			}
			nodePtr1->myNext = nodePtr2->myNext;
			nodePtr2->myNext = nodePtr1;
			mySize++;
		}
		return true;
	}
}
/* boolean insertBefore
 * Parameter: otherPersonsName and yourName, an Item
 * Postcondition: true is returned, if and only if
 * 					getIndexOf(otherPersonsName) != -1
 * 					otherPersonsName is in the List
 * 					And insert an Item yourName before otherPersonsName
 */
template<class Item>
bool List<Item>::insertBefore(const Item& otherPersonsName, const Item& yourName) {
	int index = getIndexOf(otherPersonsName);
	if (index == -1) {
		return false;
	} else {
		if (index == 0) {
			prepend(yourName);
		} else {
			Node * nodePtr1 = new Node(yourName, NULL);
			Node * nodePtr2 = myFirst;
			for (int i = 0; i < index-1; i++) {
				nodePtr2 = nodePtr2->myNext;
			}
			nodePtr1->myNext = nodePtr2->myNext;
			nodePtr2->myNext = nodePtr1;
			mySize++;
		}
		return true;
	}
}
/* output operation
 * Parameter: out, ostream, aList, List
 * Postcondition: return a reference to its left operand
 * 				  with each pair of items separated by "=>" characters.
 */
template<class Item>
ostream& operator<<(ostream& out, const List<Item>& aList) {
	aList.writeTo(out, "=>");
	return out;
}
#endif /* LIST_H_ */
ck45@vonneumann:~/workspace/112/proj06$ cat tester.cpp
/* tester.cpp
 * Joel Adams, for CS 112 at Calvin College.
 */
 
#include "ListTester.h"

int main() {
	ListTester lt;
	lt.runTests();
}
ck45@vonneumann:~/workspace/112/proj06$ cat ListTester.h
/* ListTester.h declares the test-class for class List.
 * Joel Adams, for CS 112 at Calvin College.
 */

#ifndef LISTTESTER_H_
#define LISTTESTER_H_

class ListTester {
public:
	void runTests();
	void testDefaultConstructor();
	void testNodeDefaultConstructor();
	void testNodeExplicitConstructor();
	void testAppend();
	void testDestructor();
	void testCopyConstructor();
	void testAssignment();
	void testEquality();
	void testReadFromStream();
	void testWriteToString();
	void testPrepend();
	void testInsertion();
	void testInequality();
	void testWriteToStream();
	void testReadFromString();
	void testGetIndexOf();
	void testRemove();
	void testInsertAfter();
	void testInsertBefore();
	void testOutputOperator();
};

#endif /*LISTTESTER_H_*/
ck45@vonneumann:~/workspace/112/proj06$ Cat   cat ListTester.cpp
/* ListTester.cpp defines the test methods for class List.
 * Joel Adams, for CS 112 at Calvin College.
 * Seth Galyon wrote: testInequality(), testWriteToStream(), testReadFromString(), testGetIndexOf(), testRemove()
 * Chan Kim wrote: testEquality(), testReadFromStream(), testWriteToString(), testPrepend(), testInsert()
 */


#include "ListTester.h" // ListTester
#include "List.h"       // List
#include <iostream>     // cin, cout
#include <cassert>      // assert()
#include <cstdlib>      // exit()
#include <stdexcept>    // underflow_error
using namespace std;

void ListTester::runTests() {
	cout << "Running List tests..." << endl;
	testDefaultConstructor();
	testNodeDefaultConstructor();
	testNodeExplicitConstructor();
	testAppend();
	testDestructor();
	testCopyConstructor();
	testAssignment();
	testEquality();
	testInequality();
	testReadFromStream();
	testWriteToStream();
	testReadFromString();
	testWriteToString();
	testGetIndexOf();
	testPrepend();
	testInsertion();
	testRemove();
	testInsertAfter();
	testInsertBefore();
	testOutputOperator();

	cout << "All tests passed!" << endl;
}

void ListTester::testDefaultConstructor() {
	cout << "Testing List default constructor... " << flush;
	List<double> aList;
	assert( aList.mySize == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	cout << "Passed!" << endl;
}

void ListTester::testNodeDefaultConstructor() {
	cout << "Testing Node default constructor... " << flush;
	List<double>::Node aNode;
	assert( aNode.myItem == 0 );
	assert( aNode.myNext == NULL );
	cout << "Passed!" << endl;
}

void ListTester::testNodeExplicitConstructor() {
	cout << "Testing Node explicit constructor... " << flush;
	List<double>::Node n1(11, NULL);
	assert( n1.myItem == 11 );
	assert( n1.myNext == NULL );
	cout << " 1 " << flush;

	List<double>::Node *n3 = new List<double>::Node(33, NULL);
	List<double>::Node n2(22, n3);
	assert( n2.myItem == 22 );
	assert( n2.myNext == n3 );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}

void ListTester::testAppend() {
	cout << "Testing append()... " << flush;
	// empty List
	List<double> aList;
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	try {
		aList.getFirst();
		cerr << "getFirst() worked on empty list" << endl;
		exit(1);
	} catch (underflow_error&) {
		cout << " 0a " << flush;
	}
	try {
		aList.getLast();
		cerr << "getLast() worked on empty list" << endl;
		exit(1);
	} catch (underflow_error&) {
		cout << " 0b " << flush;
	}
	// append to empty list
	aList.append(11);
	assert( aList.getSize() == 1 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast == aList.myFirst );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 11 );
	assert( aList.myFirst->myNext == NULL );
	cout << " 1 " << flush;
	// append to a list containing 1 Item
	aList.append(22);
	assert( aList.getSize() == 2 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast != NULL );
	assert( aList.myFirst != aList.myLast );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 22 );
	assert( aList.myFirst->myNext != NULL );
	assert( aList.myLast->myNext == NULL );
	cout << " 2 " << flush;
	// append to a list containing 2 Items
	aList.append(33);
	assert( aList.getSize() == 3 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast != NULL );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 33 );
	assert( aList.myFirst->myNext->myItem == 22 );
	assert( aList.myLast->myNext == NULL );
	cout << " 3 " << flush;
	cout << "Passed!" << endl;
}

void ListTester::testDestructor() {
	cout << "Testing destructor... " << flush;
	List<double> aList;
	aList.~List();
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	cout << " 1 " << flush;

	aList.append(11);
	aList.append(22);
	aList.append(33);
	aList.~List();
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	cout << " 2 " << flush;
	cout << "Passed!  But double-check for memory leaks!" << endl;
}

void ListTester::testCopyConstructor() {
	cout << "Testing copy constructor... " << flush;
	// copy empty list
	List<double> list1;
	List<double> list2(list1);
	assert( list2.getSize() == 0 );
	assert( list2.myFirst == NULL );
	assert( list2.myLast == NULL );
	cout << " 1 " << flush;

	// copy nonempty list
	List<double> list3;
	list3.append(11);
	list3.append(22);
	list3.append(33);
	List<double> list4(list3);
	assert( list4.getSize() == 3 );
	assert( list4.getFirst() == 11 );
	assert( list4.getLast() == 33 );
	assert( list4.myFirst->myNext->myItem == 22 );
	assert( list4.myFirst != list3.myFirst );
	assert( list4.myLast != list3.myLast );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}

void ListTester::testAssignment() {
	cout << "Testing assignment... " << flush;
	// empty to empty assignment
	List<double> list1;
	List<double> list2;
	list2 = list1;
	assert( list2.getSize() == 0 );
	assert( list2.myFirst == NULL );
	assert( list2.myLast == NULL );
	cout << " 1 " << flush;

	// non-empty to empty assignment
	List<double> list3;
	list3.append(11);
	list3.append(22);
	list3.append(33);
	List<double> list4;
	list4 = list3;
	assert( list4.getSize() == 3 );
	assert( list4.getFirst() == 11 );
	assert( list4.getLast() == 33 );
	assert( list4.myFirst->myNext->myItem == 22 );
      // check that nodes are distinct
	assert( list4.myFirst != list3.myFirst );
	assert( list4.myFirst->myNext != list3.myFirst->myNext );
	assert( list4.myLast != list3.myLast );
	cout << " 2 " << flush;

	// equal-sized non-empty to non-empty assignment
	List<double> list5;
	list5.append(44);
	list5.append(55);
	list5.append(66);
	list5 = list3;
	assert( list5.getSize() == 3 );
	assert( list5.getFirst() == 11 );
	assert( list5.getLast() == 33 );
	assert( list5.myFirst->myNext->myItem == 22 );
      // check that nodes are distinct
	assert( list5.myFirst != list3.myFirst );
	assert( list5.myFirst->myNext != list3.myFirst->myNext );
	assert( list5.myLast != list3.myLast );
	cout << " 3 " << flush;

	// empty to non-empty assignment
	List<double> list6;
	list6.append(44);
	list6.append(55);
	list6.append(66);
	List<double> list7;
	list6 = list7;
	assert( list6.getSize() == 0 );
	assert( list6.myFirst == NULL );
	assert( list6.myLast == NULL );
	cout << " 4 " << flush;

	// unequal-sized non-empty to non-empty assignment
	List<double> list8;
	list8.append(44);
	list8.append(55);
	list8.append(66);
	list8.append(77);
	list8 = list3;
	assert( list8.getSize() == 3 );
	assert( list8.getFirst() == 11 );
	assert( list8.getLast() == 33 );
	assert( list8.myFirst->myNext->myItem == 22 );
      // check that nodes are distinct
	assert( list8.myFirst != list3.myFirst );
	assert( list8.myFirst->myNext != list3.myFirst->myNext );
	assert( list8.myLast != list3.myLast );
	cout << " 5 " << flush;

	// assignment chaining
	List<double> list9;
	list9.append(44);
	list9.append(55);
	list9.append(66);
	list9.append(77);
	List<double> list10;
	list10 = list9 = list8;
	assert( list10.getSize() == 3 );
	assert( list10.getFirst() == 11 );
	assert( list10.getLast() == 33 );
	assert( list10.myFirst->myNext->myItem == 22 );
	cout << " 6 " << flush;

	// self-assignment (stupid, but possible)
	List<double> list11;
	list11.append(11);
	list11.append(22);
	list11.append(33);
	list11 = list11;
	assert( list11.getSize() == 3 );
	assert( list11.getFirst() == 11 );
	assert( list11.getLast() == 33 );
	assert( list11.myFirst->myNext->myItem == 22 );
	cout << " 7 " << flush;

	cout << "Passed!  But double-check for memory leaks!" << endl;
}

void ListTester::testEquality(){
	cout << "Testing ==... " << flush;
	// empty
	List<double> l1;
	List<double> l2;
	assert(l1 == l2);
	cout << " 1 " << flush;

	// same sized
	List<double> l3;
	List<double> l4a;
	List<double> l4b;
	l3.append(11);
	l4a.append(11);
	l4b.append(22);
	assert (!(l2 == l3));
	assert ((l3 == l4a));
	assert (!(l3 == l4b));
	l3.append(22);
	l4a.append(33);
	assert(!(l3 == l4a));
	cout << " 2 " << flush;

	// different sized
	List<double> l5;
	l5.append(11);
	l5.append(22);
	assert ((l3 == l5));
	l5.append(33);
	assert (!(l3==l5));
	cout << " 3 " << flush;
	cout << "Passed!" << endl;

}

void ListTester::testReadFromStream() {
	cout << "Testing readFrom(istream)... " << flush;
	// an ifstream is-an istream, so use one to automate the test
	ifstream fin("ListTest1.txt");
	assert(fin.is_open());
	// build the List
	List<double> l1;
	l1.readFrom(fin);
	// test readFrom()
	assert( l1.getSize() == 3 );
	assert( l1.getFirst() == 11 );
	assert( l1.getLast() == 33 );
	assert( l1.myFirst->myNext->myItem == 22 );
	cout << "Passed!" << endl;
}

void ListTester::testWriteToString(){
	cout << "Testing writeTo(string)... " << flush;
	List<double> l1;
	// read in a List whose values we know
	ifstream fin("ListTest1.txt");
	assert(fin.is_open());
	l1.readFrom(fin);
	// write it to a file
	l1.writeTo("ListTest2.txt");
	// now, read what we just wrote into a different List
	List<double> l2;
	ifstream fin2("ListTest2.txt");
	assert(fin2.is_open());
	l2.readFrom(fin2);
	// test it
	assert( l2.getSize() == 3 );
	assert( l2.getFirst() == 11 );
	assert( l2.getLast() == 33 );
	assert( l2.myFirst->myNext->myItem == 22 );
	cout << "Passed!" << endl;
}

void ListTester::testPrepend(){
	cout << "Testing prepend()... " << flush;
	// empty List
	List<double> aList;
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	try {
		aList.getFirst();
		cerr << "getFirst() worked on empty list" << endl;
		exit(1);
	} catch (underflow_error&) {
		cout << " 0a " << flush;
	}
	try {
		aList.getLast();
		cerr << "getLast() worked on empty list" << endl;
		exit(1);
	} catch (underflow_error&) {
		cout << " 0b " << flush;
	}
	// prepend to empty list
	aList.prepend(11);
	assert( aList.getSize() == 1 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast == aList.myFirst );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 11 );
	assert( aList.myFirst->myNext == NULL );
	cout << " 1 " << flush;
	// prepend to a list containing 1 Item
	aList.prepend(22);
	assert( aList.getSize() == 2 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast != NULL );
	assert( aList.myFirst != aList.myLast );
	assert( aList.getFirst() == 22 );
	assert( aList.getLast() == 11 );
	assert( aList.myFirst->myNext != NULL );
	assert( aList.myLast->myNext == NULL );
	cout << " 2 " << flush;
	// prepend to a list containing 2 Items
	aList.prepend(33);
	assert( aList.getSize() == 3 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast != NULL );
	assert( aList.getFirst() == 33 );
	assert( aList.getLast() == 11 );
	assert( aList.myFirst->myNext->myItem == 22 );
	assert( aList.myLast->myNext == NULL );
	cout << " 3 " << flush;
	cout << "Passed!" << endl;

}

void ListTester::testInsertion(){
	cout << "Testing insert()... " << flush;
	// empty List
	List<double> aList;
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	try {
		aList.getFirst();
		cerr << "getFirst() worked on empty list" << endl;
		exit(1);
	} catch (underflow_error&) {
		cout << " 0a " << flush;
	}
	try {
		aList.getLast();
		cerr << "getLast() worked on empty list" << endl;
		exit(1);
	} catch (underflow_error&) {
		cout << " 0b " << flush;
	}
	// insert to empty list
	aList.insert(11,0);
	assert( aList.getSize() == 1 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast == aList.myFirst );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 11 );
	assert( aList.myFirst->myNext == NULL );
	cout << " 1 " << flush;
	// insert to a list containing 1 Item at index 2
	aList.insert(33,2);
	assert( aList.getSize() == 2 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast != NULL );
	assert( aList.myFirst != aList.myLast );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 33 );
	assert( aList.myFirst->myNext != NULL );
	assert( aList.myLast->myNext == NULL );
	cout << " 2 " << flush;
	// insert to a list containing 2 Items at index 1
	aList.insert(22,1);
	assert( aList.getSize() == 3 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast != NULL );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 33 );
	assert( aList.myFirst->myNext->myItem == 22 );
	assert( aList.myLast->myNext == NULL );
	cout << " 3 " << flush;
	cout << "Passed!" << endl;
}

void ListTester::testInequality() {
	cout << "Testing operator!=()... " << flush;

	// empty
	List<int> l1;
	List<int> l2;
	assert( !(l1 != l2) );
	cout << " 0 " << flush;

	// nonempty, same values and same size
	List<int> l3;
	l3.append(11);
	l3.append(22);
	l3.append(33);
	List<int> l4;
	l4.append(11);
	l4.append(22);
	l4.append(33);
	assert( !(l3 != l4) );
	cout << " 1 " << flush;

	// nonempty, different values and same size
	List<int> l5;
	l5.append(11);
	l5.append(22);
	l5.append(33);
	List<int> l6;
	l6.append(12);
	l6.append(22);
	l6.append(33);
	assert( l5 != l6 );
	cout << " 2 " << flush;

	// nonempty, same values(more or less) and different size
	List<int> l7;
	l7.append(11);
	l7.append(22);
	l7.append(33);
	List<int> l8;
	l8.append(11);
	l8.append(22);
	assert( l5 != l6 );
	cout << " 3 " << flush;

	//empty and nonempty
	List<int> l9;
	List<int> l10;
	l10.append(11);
	l10.append(22);
	assert( l9 != l10 );
	cout << " 4 " << flush;

	cout << "Passed!" << endl;
}

void ListTester::testWriteToStream() {
	cout << "Testing writeTo(ostream)... " << flush;
	List<unsigned> l;
	// read a Matrix whose values we know
	l.readFrom("ListTest1.txt");
	ofstream fout("ListTest1Copy.txt");
	assert( fout.is_open() );
	// now write it to a file via a stream
	l.writeTo(fout);
	fout.close();
	// now, read what we just wrote into a different Matrix
	List<int> l1;
	l1.readFrom("ListTest1Copy.txt");
	// and test it
	assert( l1.getSize() == 3 );
	assert( l1.myFirst->myItem == 11 );
	assert( l1.myFirst->myNext->myItem == 22 );
	assert( l1.myFirst->myNext->myNext->myItem == 33 );

	cout << "Passed!" << endl;
}

void ListTester::testReadFromString() {
	cout << "Testing readFrom(string)... " << flush;
	// build the List
	List<double> l1;
	l1.readFrom("ListTest1.txt");
	// test readFrom(string)
	assert( l1.getSize() == 3 );
	assert( l1.getFirst() == 11 );
	assert( l1.getLast() == 33 );
	assert( l1.myFirst->myNext->myItem == 22 );
	cout << "Passed!" << endl;
}

void ListTester::testGetIndexOf() {
	cout << "Testing getIndexOf(item)... " << flush;
	//create a list
	List<double> l1;
	l1.append(11);
	l1.append(22);
	l1.append(33);

	//get index of values in l1
	int index = l1.getIndexOf(22);
	assert( index == 1 );
	cout << " 0 " << flush;
	int index2 = l1.getIndexOf(11);
	assert( index2 == 0 );
	cout << " 1 " << flush;
	int index3 = l1.getIndexOf(33);
	assert( index3 == 2 );
	cout << " 2 " << flush;

	//try to get index of value not in l1
	int index4 = l1.getIndexOf(1);
	assert( index4 == -1 );
	cout << " 3 " << flush;

	//create an empty list
	List<double> l0;

	//try to get an index in the empty list
	int index5 = l0.getIndexOf(22);
	assert( index5 == -1 );
	cout << " 4 " << flush;

	cout << " Passed!" << endl;
}

void ListTester::testRemove() {
	cout << "Testing remove(index)... " << flush;

	//create an empty list
	List<double> l0;

	//try to remove an index
	double it0 = l0.remove(1);
	double it1 = l0.remove(-2);
	assert( it0 == 0 );
	assert( it1 == 0 );
	cout << " 0 " << flush;

	//create a list
	List<double> l1;
	l1.append(11);
	l1.append(22);
	l1.append(33);

	//remove 11 with index zero
	double it;
	it = l1.remove(0);
	assert( it == 11 );
	assert( l1.mySize == 2 );
	assert( l1.myFirst->myItem == 22 );
	assert( l1.myLast->myItem == 33 );
	assert( l1.myFirst != l1.myLast );
	cout << " 1 " << flush;

	//remove 22 (first index) with index less than zero
	double it2;
	it2 = l1.remove(-1);
	assert( it2 == 22 );
	assert( l1.mySize == 1 );
	assert( l1.myFirst->myItem == 33 );
	assert( l1.myFirst == l1.myLast );
	cout << " 2 " << flush;

	//create a new list
	List<double> l2;
	l2.append(11);
	l2.append(22);
	l2.append(33);
	l2.append(44);
	l2.append(55);

	//remove 33 with index 2
	double it3;
	it3 = l2.remove(2);
	assert( it3 == 33 );
	assert( l2.mySize == 4 );
	assert( l2.myFirst->myItem == 11 );
	assert( l2.myFirst->myNext->myItem == 22 );
	assert( l2.myFirst->myNext->myNext->myItem == 44 );
	assert( l2.myLast->myItem == 55 );
	assert( l2.myFirst != l1.myLast );
	cout << " 3 " << flush;

	//remove 44 with index 2
	double it4;
	it4 = l2.remove(2);
	assert( it4 == 44 );
	assert( l2.mySize == 3 );
	assert( l2.myFirst->myItem == 11 );
	assert( l2.myLast->myItem == 55 );
	assert( l2.myFirst != l1.myLast );
	cout << " 4 " << flush;

	//new list
	List<double> l3;
	l3.append(11);
	l3.append(22);
	l3.append(33);

	//remove 33 with index of 2
	double it5;
	it5 = l3.remove(2);
	assert( it5 == 33 );
	assert( l3.mySize == 2 );
	assert( l3.myFirst->myItem == 11 );
	assert( l3.myLast->myItem == 22 );
	assert( l3.myFirst != l3.myLast );
	cout << " 5 " << flush;

	//remove 22 (last index) with index larger than last index
	double it6;
	it6 = l3.remove(3);
	assert( it6 == 22 );
	assert( l3.mySize == 1 );
	assert( l3.myFirst->myItem == 11 );
	assert( l3.myFirst == l3.myLast );
	cout << " 6 " << flush;

	cout << " Passed!" << endl;
}

void ListTester::testInsertAfter(){
	cout << "Testing InsertAfter()... " << flush;
	// insert to an empty List
	List<string> aList;
	aList.insertAfter("Ann","Bob");
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	try {
		aList.getFirst();
		cerr << "getFirst() worked on empty list" << endl;
		exit(1);
	} catch (underflow_error&) {
		cout << " 0a " << flush;
	}
	try {
		aList.getLast();
		cerr << "getLast() worked on empty list" << endl;
		exit(1);
	} catch (underflow_error&) {
		cout << " 0b " << flush;
	}
	// insert to a list containing 1 Item
	aList.append("Ann");
	aList.insertAfter("Ann","Bob");
	assert( aList.getSize() == 2 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast != NULL );
	assert( aList.myFirst != aList.myLast );
	assert( aList.getFirst() == "Ann" );
	assert( aList.getLast() == "Bob" );
	assert( aList.myFirst->myNext != NULL );
	assert( aList.myLast->myNext == NULL );
	cout << " 1 " << flush;
	// insert to a list containing 2 Items
	aList.insertAfter("Ann","Chris");
	assert( aList.getSize() == 3 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast != NULL );
	assert( aList.getFirst() == "Ann" );
	assert( aList.getLast() == "Bob" );
	assert( aList.myFirst->myNext->myItem == "Chris" );
	assert( aList.myLast->myNext == NULL );
	cout << " 2 " << flush;
	// insert to a list containing 3 Items
	aList.insertAfter("Chris","Don");
	assert( aList.getSize() == 4 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast != NULL );
	assert( aList.getFirst() == "Ann" );
	assert( aList.getLast() == "Bob" );
	assert( aList.myFirst->myNext->myItem == "Chris" );
	assert( aList.myFirst->myNext->myNext->myItem == "Don" );
	assert( aList.myLast->myNext == NULL );
	cout << " 3 " << flush;
	cout << " Passed!" << endl;
}
void ListTester::testInsertBefore(){
	cout << "Testing InsertBefore()... " << flush;
	// insert to an empty List
	List<string> aList;
	aList.insertBefore("Ann","Bob");
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	try {
		aList.getFirst();
		cerr << "getFirst() worked on empty list" << endl;
		exit(1);
	} catch (underflow_error&) {
		cout << " 0a " << flush;
	}
	try {
		aList.getLast();
		cerr << "getLast() worked on empty list" << endl;
		exit(1);
	} catch (underflow_error&) {
		cout << " 0b " << flush;
	}
	// insert to a list containing 1 Item
	aList.append("Ann");
	aList.insertBefore("Ann","Bob");
	assert( aList.getSize() == 2 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast != NULL );
	assert( aList.myFirst != aList.myLast );
	assert( aList.getFirst() == "Bob" );
	assert( aList.getLast() == "Ann" );
	assert( aList.myFirst->myNext != NULL );
	assert( aList.myLast->myNext == NULL );
	cout << " 1 " << flush;
	// insert to a list containing 2 Items
	aList.insertAfter("Ann","Chris");
	assert( aList.getSize() == 3 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast != NULL );
	assert( aList.getFirst() == "Bob" );
	assert( aList.getLast() == "Chris" );
	assert( aList.myFirst->myNext->myItem == "Ann" );
	assert( aList.myLast->myNext == NULL );
	cout << " 2 " << flush;
	// insert to a list containing 3 Items
	aList.insertAfter("Ann","Don");
	assert( aList.getSize() == 4 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast != NULL );
	assert( aList.getFirst() == "Bob" );
	assert( aList.getLast() == "Chris" );
	assert( aList.myFirst->myNext->myItem == "Ann" );
	assert( aList.myFirst->myNext->myNext->myItem == "Don" );
	assert( aList.myLast->myNext == NULL );
	cout << " 3 " << flush;
	cout << " Passed!" << endl;
}
void ListTester::testOutputOperator(){
	cout << "Testing OutputOperator()... " << flush;
	List<string> aList;
	aList.append("A");
	aList.append("B");
	aList.append("C");
	cout << aList << flush;
	cout << " Passed!" << endl;
}
ck45@vonneumann:~/workspace/112/proj06$ cd Debug
ck45@vonneumann:~/workspace/112/proj06/Debug$ ls
CongaLine.d  ListTester.d  main.d  makefile    proj06	   subdir.mk  tester.o
CongaLine.o  ListTester.o  main.o  objects.mk  sources.mk  tester.d
ck45@vonneumann:~/workspace/112/proj06/Debug$ make all
make: Nothing to be done for 'all'.
ck45@vonneumann:~/workspace/112/proj06/Debug$ cd ..
ck45@vonneumann:~/workspace/112/proj06$ ./Debug/proj06
Running List tests...
Testing List default constructor... Passed!
Testing Node default constructor... Passed!
Testing Node explicit constructor...  1  2 Passed!
Testing append()...  0a  0b  1  2  3 Passed!
Testing destructor...  1  2 Passed!  But double-check for memory leaks!
Testing copy constructor...  1  2 Passed!
Testing assignment...  1  2  3  4  5  6  7 Passed!  But double-check for memory leaks!
Testing ==...  1  2  3 Passed!
Testing operator!=()...  0  1  2  3  4 Passed!
Testing readFrom(istream)... Passed!
Testing writeTo(ostream)... Passed!
Testing readFrom(string)... Passed!
Testing writeTo(string)... Passed!
Testing getIndexOf(item)...  0  1  2  3  4  Passed!
Testing prepend()...  0a  0b  1  2  3 Passed!
Testing insert()...  0a  0b  1  2  3 Passed!
Testing remove(index)...  0  1  2  3  4  5  6  Passed!
Testing InsertAfter()...  0a  0b  1  2  3  Passed!
Testing InsertBefore()...  0a  0b  1  2  3  Passed!
Testing OutputOperator()... A=>B=>C Passed!
All tests passed!
ck45@vonneumann:~/workspace/112/proj06$ l/  ./Debug  /proj06
Ann and Bob have started a Conga Line!

 Ann=>Bob


Ann	Bob

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 1

What is your name? Chris

 Ann=>Bob=>Chris


Ann	Bob	Chris

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 2

What is your name? Don
Who do you want to follow? Ann

 Ann=>Don=>Bob=>Chris


Ann	Don	Bob	Chris

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 2

What is your name? Eve
Who do you want to follow? Bob

 Ann=>Don=>Bob=>Eve=>Chris


Ann	Don	Bob	Eve	Chris

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 2

What is your name? Fred
Who do you want to follow? Chris

 Ann=>Don=>Bob=>Eve=>Chris=>Fred


Ann	Don	Bob	Eve	Chris	Fred

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 3

What is your name? Gwen
Who do you want to precede? Ann

 Gwen=>Ann=>Don=>Bob=>Eve=>Chris=>Fred


Gwen	Ann	Don	Bob	Eve	Chris	Fred

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 3

What is your name? Hal9000
Who do you want to precede? Eve

 Gwen=>Ann=>Don=>Bob=>Hal9000=>Eve=>Chris=>Fred


Gwen	Ann	Don	Bob	Hal9000	Eve	Chris	Fred

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 3

What is your name? Ivy
Who do you want to precede? Fred

 Gwen=>Ann=>Don=>Bob=>Hal9000=>Eve=>Chris=>Ivy=>Fred


Gwen	Ann	Don	Bob	Hal9000	Eve	Chris	Ivy	Fred

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 2

What is your name? Joe
Who do you want to follow? Bilbo

***Bilbo is not dancing!


 Gwen=>Ann=>Don=>Bob=>Hal9000=>Eve=>Chris=>Ivy=>Fred


Gwen	Ann	Don	Bob	Hal9000	Eve	Chris	Ivy	Fred

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 3

What is your name? Joe n
Who do you want to precede? Frodo

***Frodo is not dancing!


 Gwen=>Ann=>Don=>Bob=>Hal9000=>Eve=>Chris=>Ivy=>Fred


Gwen	Ann	Don	Bob	Hal9000	Eve	Chris	Ivy	Fred

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 0

*** 0 is not a valid choice!


 Gwen=>Ann=>Don=>Bob=>Hal9000=>Eve=>Chris=>Ivy=>Fred


Gwen	Ann	Don	Bob	Hal9000	Eve	Chris	Ivy	Fred

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 5

*** 5 is not a valid choice!


 Gwen=>Ann=>Don=>Bob=>Hal9000=>Eve=>Chris=>Ivy=>Fred


Gwen	Ann	Don	Bob	Hal9000	Eve	Chris	Ivy	Fred

Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 4

*** 4 is not a valid choice!

ck45@vonneumann:~/workspace/112/proj06$ exit

Script done on Mon 27 Mar 2017 08:45:48 PM EDT
