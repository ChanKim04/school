Script started on Mon 06 Mar 2017 10:18:08 PM EST
ck45@goldberg:~/workspace/112/proj04$ cat tester.cpp
/* tester.cpp drives the testing of our Vec template and Matrix class.
 * Student Name: Chan Kim (ck45)
 * 				 Thomas Woltier (tw34)
 * Date: 03/06/2017
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#include "VecTester.h"
#include "MatrixTester.h"
#include "Application.h"

int main() {
	MatrixTester mt;
	mt.runTests();
	Application app;
	app.run();
}
ck45@goldberg:~/workspace/112/proj04$ cat Matrix.h
/* Matrix.h provides a class for manipulating 2-dimensional vectors.
 * Student Name: Chan Kim (ck45)
 * 				 Thomas Woltier (tw34)
 * Date: 03/06/2017
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */

#ifndef MATRIX_H_
#define MATRIX_H_

#include "Vec.h"

template<class Item>
class Matrix {
public:
	Matrix();
	Matrix(unsigned rows, unsigned columns);
	unsigned getRows() const { return myRows; }
	unsigned getColumns() const { return myColumns; }
	Vec<Item>& operator[](unsigned index);
	const Vec<Item>& operator[](unsigned index) const;
	bool operator==(const Matrix& m2);
	bool operator!=(const Matrix& m2);
	void readFrom(istream& in);
	void writeTo(ostream& out) const;
	void writeTo(const string& fileName) const;
	void readFrom(const string& fileName);
	Matrix operator+(const Matrix& m2) const;
	Matrix operator-(const Matrix& m2) const;
	Matrix operator*(const Matrix& m2) const;
	Matrix getTranspose() const;
private:
	unsigned myRows;
	unsigned myColumns;
	Vec< Vec<Item> > myVec;
	friend class MatrixTester;
};
/* Matrix default constructor
 * Postcondition: myRows and myColumns == 0
 */
template<class Item>
Matrix<Item>::Matrix() {
	myRows = myColumns = 0;
}
/* Explicit constructor
 * Parameter: rows, unsigned
 * 			  columns, unsigned
 * Postcondition: myRows == rows
 * 				  myColumns == columns
 */
template<class Item>
Matrix<Item>::Matrix(unsigned rows, unsigned columns) {
	myRows = rows;
	myColumns = columns;
	myVec.setSize(rows);
	for (unsigned i = 0; i < rows; i++) {
		myVec[i].setSize(columns);
		for (unsigned j = 0; j < columns; j++) {
			myVec[i][j];
		}
	}
}
/* []operator for set
 * Parameter: index, unsigned
 * Postcondition: sets the index in the vec to new Item
 */
template<class Item>
Vec<Item>& Matrix<Item>::operator[](unsigned index) {
	if (index < 0 || index >= myRows) {
		throw range_error("out of range");
	}
	return myVec[index];
}
/* []operator for get
 * Parameter: index, unsigned
 * Postcondition: returns the Item at the index in the vec
 */
template<class Item>
const Vec<Item>& Matrix<Item>::operator[](unsigned index) const {
	if (index < 0 || index >= myRows) {
		throw range_error("out of range");
	}
	return myVec[index];
}
/* boolean equality
 * Parameter: m2, a Matrix
 * Postcondition: true is returned, if and only if
 * 					myRows == m2.myRows
 * 					myColumns == m2.myColumns
 * 					myVec == m2.myVec
 * 					my values are same to m2's values.
 */
template<class Item>
bool Matrix<Item>::operator==(const Matrix<Item>& m2) {
	if ( myRows != m2.getRows() || myColumns != m2.getColumns() ) {
		return false;
	}
	for (unsigned i = 0; i < myRows; i++) {
		for (unsigned j = 0; j < myColumns; j++) {
			if ( myVec[i][j] != m2.myVec[i][j] ) {
				return false;
			}
		}
	}
	return true;
}
/* boolean inequality
 * Parameter: m2, a Matrix
 * Postcondition: true is returned, if and only if
 * 					myRows != m2.myRows
 * 					myColumns != m2.myColumns
 * 					or myVec != m2.myVec
 * 					my values are different to m2's values.
 */
template<class Item>
bool Matrix<Item>::operator!=(const Matrix<Item>& m2) {
	if ( myRows != m2.getRows() || myColumns != m2.getColumns() ) {
		return true;
	}
	for (unsigned i = 0; i < myRows; i++) {
		for (unsigned j = 0; j < myColumns; j++) {
			if ( myVec[i][j] != m2.myVec[i][j] ) {
				return true;
			}
		}
	}
	return false;
}

/* Matrix input method
 * Parameter: in, an istream
 * Precondition: in contains the rows, columns, and Vec for a Matrix
 * Postcondition: the rows, columns, and Vec have been read from in
 */
template<class Item>
void Matrix<Item>::readFrom(istream& in) {
	for(unsigned i = 0; i < myRows; i++){
		for(unsigned j =0; j < myColumns; j++){
		in >> myVec[i][j];
		}
	}
}
/* Matrix output
 * Parameter: out, an ostream
 * Postcondition: out Vec
 */
template<class Item>
void Matrix<Item>::writeTo(ostream& out) const {
	for(unsigned i = 0; i < myRows; i++){
		for(unsigned j =0; j < myColumns; j++){
		out << myVec[i][j] << '\t';
		}
		out << '\n';
	}
	out << endl;
}
/* File Input
 * Parameter: fileName, a string
 * Precondition: fileName contain the name of a Matrix file.
 */
template<class Item>
void Matrix<Item>::readFrom(const string& fileName) {
	ifstream fin( fileName.c_str() );
	assert ( fin.is_open());
	fin >> myRows >> myColumns;
	myVec.setSize(myRows);
	for(unsigned i = 0; i < myRows; i++) {
		myVec[i].setSize(myColumns);
	}
	readFrom(fin);
	fin.close();
}
/* File Output
 * Parameter: fileName, a string
 * Precondition: exports the values of the Matrix
 */
template<class Item>
void Matrix<Item>::writeTo(const string& fileName) const{
	ofstream fout(fileName.c_str());
	assert( fout.is_open() );
	fout << myRows << '\t' << myColumns << '\n';
	writeTo(fout);
	fout.close();
}
/* Matrix addition
 * Parameter: m2, a Matrix
 * Precondition: myRows == m2.myRows()
 * 				 myColumns = m2.myColumns()
 * Postcondition: a Matrix is returned containing the product of
 * 					my values and m2's values.
 */
template<class Item>
Matrix<Item> Matrix<Item>::operator+(const Matrix<Item>& m2) const {
	if ((myRows != m2.myRows) or (myColumns != m2.myColumns)) {
		throw invalid_argument("not the same size");
	}
	Matrix<Item> addMax(myRows, myColumns);
	for(unsigned i = 0; i < myRows; i++){
		for(unsigned j =0; j < myColumns; j++){
			addMax[i][j] = myVec[i][j] + m2.myVec[i][j];
		}
	}
	return addMax;
}
/* Matrix subtraction
 * Parameter: m2, a Matrix
 * Precondition: myRows == m2.myRows()
 * 				 myColumns = m2.myColumns()
 * Postcondition: a Matrix is returned containing the product of
 * 					my values and m2's values.
 */
template<class Item>
Matrix<Item> Matrix<Item>::operator-(const Matrix<Item>& m2) const {
	if ((myRows != m2.myRows) or (myColumns != m2.myColumns)) {
		throw invalid_argument("not the same size");
	}
	Matrix<Item> subMax(myRows, myColumns);
	for(unsigned i = 0; i < myRows; i++){
		for(unsigned j =0; j < myColumns; j++){
			subMax[i][j] = myVec[i][j] - m2.myVec[i][j];
		}
	}
	return subMax;
}
/* Matrix multiply
 * Parameter: m2, a Matrix
 * Precondition: myRows == m2.myColumns()
 * Postcondition: a Matrix is returned containing the product of
 * 					my values and m2's values.
 */
template<class Item>
Matrix<Item> Matrix<Item>::operator*(const Matrix<Item>& m2) const {
	if (myColumns != m2.myRows) {
		throw invalid_argument("not the same size");
	}
	Matrix<Item> mulMax(myRows, m2.myColumns);
	for(unsigned i = 0; i < myRows; i++)
		for(unsigned j =0; j < m2.myColumns; j++)
		{
			double sum = 0;
			for(unsigned k =0; k < myColumns; k++)
			sum += myVec[i][k] * m2.myVec[k][j];
			mulMax[i][j] = sum;
		}
	return mulMax;
	}
/* Matrix transpose
 * Postcondition: returns a Matrix whose columns are myRows, and whose rows are myColumns
 */
template<class Item>
Matrix<Item> Matrix<Item>::getTranspose() const{
	Matrix Max(myColumns, myRows);
	for(unsigned i = 0; i < myColumns; i++){
		for(unsigned j =0; j < myRows; j++){
			Max[i][j] = myVec[j][i];
		}
	}
	return Max;
}
#endif
ck45@goldberg:~/workspace/112/proj04$ cat Application.h
/*
 * Application.h
 *
 *  Created on: 2017. 3. 6.
 *      Author: Chan Kim
 */

#ifndef APPLICATION_H_
#define APPLICATION_H_
#include "Matrix.h"

class Application {
public:
	Application();
	void run();
};

#endif /* APPLICATION_H_ */
ck45@goldberg:~/workspace/112/proj04$ cat Applicationl.  .cpp
/*
 * Application.cpp
 *
 *  Created on: 2017. 3. 6.
 *      Author: Chan Kim
 */

#include "Application.h"


Application::Application() {

}
/* Run the Application
 */
void Application::run() {
	while(true){
		cout << "Welcome to the Matrix program!\n"
				"Enter name of file containing the first matrix: ";
	    string fileName1;
	    cin >> fileName1;
	    Matrix<double> m1;
	    m1.readFrom(fileName1);
	    m1.writeTo(cout);
	    cout << "Choose one of operations\n"
				"\t 1. addition (+)"
				"\t 2. subtraction (-)"
				"\t 3. transpose"
	    		"\t other keys. exit"<< endl;
	    unsigned input;
	    cin >> input;
	    if (input == 1 or input == 2) {
	    	cout << "Enter name of file containing the second matrix: ";
	    	string fileName2;
	    	cin >> fileName2;
	    	Matrix<double> m2;
	    	m2.readFrom(fileName2);
	    	m2.writeTo(cout);
	    	Matrix<double> m3;
	    	if (input == 1) {
	    		m3 = m1 + m2;
	    		m3.writeTo(cout);
	    	} else {
	    		m3 = m1 - m2;
	    		m3.writeTo(cout);
	    	}
	    } else if (input == 3){
	    	Matrix<double> m4;
	    	m4 = m1.getTranspose();
	    	m4.writeTo(cout);
	    } else {
	    	cout << "End program..." << endl;
	    	break;
	    }
	}
}
ck45@goldberg:~/workspace/112/proj04$ cat MatrixTester.cpp   h
/* MatrixTester.h declares test-methods for class Matrix.
 * Joel C. Adams, for CS 112 at Calvin College.
 */
 
#ifndef MATRIXTESTER_H_
#define MATRIXTESTER_H_

#include "Matrix.h"

class MatrixTester {
public:
	void runTests();
	void testDefaultConstructor();
	void testExplicitConstructor();
	void testCopyConstructor();
	void testAssignment();
	void testEquality();
	void testInequality();
	void testSubscripts();
	void testReadSubscript(const Matrix<double>& mat);
	void testTranspose();
	void testAddition();
	void testSubtraction();
	void testMultiply();
	void testReadFromStream();
	void testReadFromFile();
	void testWriteToStream();
	void testWriteToFile();
};

#endif /*MATRIXTESTER_H_*/
ck45@goldberg:~/workspace/112/proj04$ cat MatrixTester.cpp
/* MatrixTester.cpp defines test-methods for class Matrix.
 * Joel Adams, for CS 112 at Calvin College.
 */
 
#include "MatrixTester.h"
#include <iostream>        // cout, cerr, ...
#include <cstdlib>         // exit()
#include <stdexcept>       // range_error, ...
using namespace std;

void MatrixTester::testDefaultConstructor() {
	cout << "Testing default constructor..." << flush;
	Matrix<double> m1;
	assert( m1.getRows() == 0 );
	assert( m1.getColumns() == 0 );
	cout << " 0 " << flush;

	Matrix<double> m2;
	assert( m2.getRows() == 0 );
	assert( m2.getColumns() == 0 );
	cout << " 1 " << flush;

	cout << "Passed!" << endl;
}

void MatrixTester::testExplicitConstructor() {
	cout << "Testing explicit constructor..." << flush;
	Matrix<double> m1(2, 3);
	assert( m1.getRows() == 2 );
	assert( m1.getColumns() == 3 );
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m1.myVec[i][j] == 0 );
		}
	}
	cout << " 1 " << flush;

	Matrix<double> m2(3, 1);
	assert( m2.getRows() == 3 );
	assert( m2.getColumns() == 1 );
	for (unsigned i = 0; i < m2.getRows(); i++) {
		for (unsigned j = 0; j < m2.getColumns(); j++) {
			assert( m2.myVec[i][j] == 0 );
		}
	}
	cout << " 2 " << flush;

	cout << "Passed!" << endl;
}

void MatrixTester::testCopyConstructor() {
	cout << "Testing copy constructor... " << flush;
	// copy empty matrix
	Matrix<double> m1;
	Matrix<double> m2 = Matrix<double>(m1);
	assert( m2.getRows() == 0 );
	assert( m2.getColumns() == 0 );
	assert( m2.myVec.getSize() == 0 );
	cout << " 1 " << flush;

	// copy non-empty matrix
	Matrix<double> m3(2, 3);
	for (unsigned i = 0; i < m3.getRows(); i++) {
		for (unsigned j = 0; j < m3.getColumns(); j++) {
			m3.myVec[i][j] = i+j;
		}
	}
	Matrix<double> m4 = Matrix<double>(m3);
	assert( m4.getRows() == m3.getRows() );
	assert( m4.getColumns() == m3.getColumns() );
	assert( m4.myVec.getSize() == m3.myVec.getSize() );
	for (unsigned i = 0; i < m3.getRows(); i++) {
		for (unsigned j = 0; j < m3.getColumns(); j++) {
			assert( m4.myVec[i][j] == i+j );
		}
	}
	cout << " 2 " << flush;

	cout << " Passed!" << endl;
}

void MatrixTester::testAssignment() {
	cout << "Testing =... " << flush;
	// empty to empty
	Matrix<double> m0;
	Matrix<double> m1;
	m0 = m1;
	assert( m0.getRows() == 0 );
	assert( m0.getColumns() == 0 );
	assert( m0.myVec.getSize() == 0 );
	cout << " 0 " << flush;

	// nonempty to empty
	Matrix<double> m2(2,3);
	m0 = m2;
	assert( m0.getRows() == 2 );
	assert( m0.getColumns() == 3 );
	assert( m0.myVec == m2.myVec );
	cout << " 1 " << flush;

	// empty to nonempty
	m2 = m1;
	assert( m2.getRows() == 0 );
	assert( m2.getColumns() == 0 );
	assert( m2.myVec == m1.myVec );
	cout << " 2 " << flush;

	// non-empty to non-empty
	Matrix<double> m3(2, 3);
	for (unsigned i = 0; i < m3.getRows(); i++) {
		for (unsigned j = 0; j < m3.getColumns(); j++) {
			m3[i][j] = i+j;
		}
	}
	Matrix<double> m4(5, 4);
	m4 = m3;
	assert( m4.getRows() == 2 );
	assert( m4.getColumns() == 3 );
	assert( m4.myVec == m3.myVec );
	cout << " 3 " << flush;

	// chaining
	Matrix<double> m5;
	m5 = m0 = m4;
	assert( m0.getRows() == 2 );
	assert( m0.getColumns() == 3 );
	assert( m0.myVec == m4.myVec );
	assert( m5.getRows() == 2 );
	assert( m5.getColumns() == 3 );
	assert( m5.myVec == m0.myVec );
	cout << " 4 " << flush;

	// self-assignment
	m5 = m5;
	assert( m5.getRows() == 2 );
	assert( m5.getColumns() == 3 );
	for (unsigned i = 0; i < m5.getRows(); i++) {
		for (unsigned j = 0; j < m5.getColumns(); j++) {
			assert( m5[i][j] == i+j );
		}
	}
	cout << " 5 " << flush;

	cout << "Passed!" << endl;
}

void MatrixTester::testEquality() {
	cout << "Testing ==... " << flush;
	// empty
	Matrix<double> m1;
	Matrix<double> m2;
	assert( m1 == m2 );
	cout << " 1 " << flush;

	// same sized
	Matrix<double> m3(2, 3);
	Matrix<double> m4a(2, 3);
	Matrix<double> m4b(2, 3);
	Matrix<double> m5(2, 3);
	for (unsigned i = 0; i < m3.getRows(); i++) {
		for (unsigned j = 0; j < m3.getColumns(); j++) {
			m3[i][j] = i+j;
			m4a[i][j] = i+j;
			m4b[i][j] = i+j;
			m5[i][j] = i*j;
		}
	}
	assert( m3 == m4a );
	assert( !(m1 == m3) );
	assert( !(m3 == m5) );
	m4b[1][1] = 0;
	assert( !(m3 == m4b) );
	cout << " 2 " << flush;

	// different row sizes
	Matrix<double> m6(3,3);
	Matrix<double> m7(2,3);
	assert( !(m6 == m7) );
	cout << " 3 " << flush;

	// same row sizes, different column sizes
	Matrix<double> m8(2,4);
	assert( !(m8 == m7 ) );
	cout << " 4 " << flush;

	cout << "Passed!" << endl;
}

void MatrixTester::testReadSubscript(const Matrix<double>& mat) {
	for (unsigned i = 0; i < mat.getRows(); i++) {
		for (unsigned j = 0; j < mat.getColumns(); j++) {
			assert( i*j == mat[i][j] );
		}
	}
}
//
void MatrixTester::testSubscripts() {
	cout << "Testing subscripts... " << flush;
	Matrix<double> m(4, 3);
	// test write-subscript
	for (unsigned i = 0; i < m.getRows(); i++) {
		for (unsigned j = 0; j < m.getColumns(); j++) {
			m[i][j] = i*j;
		}
	}
	cout << " 1 " << flush;

	// test read-subscript -- see above
	testReadSubscript(m);
	cout << " 2 " << flush;

	// exceptions
	// empty Matrix
	Matrix<double> m0;

	// read subscript
	try {
		m0[0][0];
		cerr << "successfully read from empty Matrix";
		exit(1);
	} catch (range_error&) {
		cout << " 3 " << flush;
 	}

	// write subscript
	try {
		m0[0][0] = 0;
		cerr << "successfully wrote to empty Matrix";
		exit(1);
	} catch (range_error&) {
		cout << " 4 " << flush;
 	}

	// nonempty Matrix
	Matrix<double> m2(2,3);

	// beyond last row
	try {
		m2[2][0] = 0;
		cerr << "successfully wrote past last Matrix row";
		exit(1);
	} catch (range_error&) {
		cout << " 5 " << flush;
 	}

	// beyond last column
	try {
		m2[0][3] = 0;
		cerr << "successfully wrote past last Matrix column";
		exit(1);
	} catch (range_error&) {
		cout << " 6 " << flush;
 	}

	cout << "Passed!" << endl;
}


void MatrixTester::testInequality() {
	cout << "Testing !=... " << flush;

	// empty
	Matrix<double> m1;
	Matrix<double> m2;
	assert( !(m1 != m2) );
	cout << " 0 " << flush;

	// nonempty, same size
	Matrix<double> m3(2, 3);
	Matrix<double> m4(2, 3);
	Matrix<double> m5(2, 3);
	for (unsigned i = 0; i < m3.getRows(); i++) {
		for (unsigned j = 0; j < m3.getColumns(); j++) {
			m3[i][j] = i+j;
			m4[i][j] = i+j;
			m5[i][j] = i*j;
		}
	}
	assert( !(m3 != m4) );
	assert( m1 != m3 );
	assert( m3 != m5 );
	cout << " 1 " << flush;

	// nonempty, different row sizes
	Matrix<double> m6(3,3);
	for (unsigned i = 0; i < m6.getRows(); i++) {
		for (unsigned j = 0; j < m6.getColumns(); j++) {
			m6[i][j] = i+j;
		}
	}
	assert( m3 != m6 );
	cout << " 2 " << flush;

	// nonempty, different column sizes
	Matrix<double> m7(2, 4);
	for (unsigned i = 0; i < m7.getRows(); i++) {
		for (unsigned j = 0; j < m7.getColumns(); j++) {
			m7[i][j] = i+j;
		}
	}
	assert( m3 != m7 );
	cout << " 3 " << flush;

	cout << "Passed!" << endl;
}

void MatrixTester::testTranspose() {
	cout << "Testing getTranspose()... " << flush;
	// empty
	Matrix<double> m0a, m0b(2,3);
	m0b = m0a.getTranspose();
	assert( m0b.getRows() == 0 );
	assert( m0b.getColumns() == 0 );
	assert( m0b.myVec.getSize() == 0 );
	cout << " 0 " << flush;

	// nonempty
	Matrix<double> m1(4, 3);
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			m1[i][j] = i*j;
		}
	}
	Matrix<double> m2 = m1.getTranspose();
	assert( m2.getRows() == m1.getColumns() );
	assert( m2.getColumns() == m1.getRows() );
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m2[j][i] == m1[i][j] );
		}
	}
	cout << " 1a " << flush;
	// check that m1 is unchanged
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m1[i][j] == i*j );
		}
	}
	cout << " 1b " << flush;

	cout << "Passed!" << endl;
}

void MatrixTester::testAddition() {
	cout << "Testing +... " << flush;
	// empty
	Matrix<double> m0a, m0b, m0c(3,2);
	m0c = m0a + m0b;
	assert( m0c.getRows() == 0 );
	assert( m0c.getColumns() == 0 );
	assert( m0c.myVec.getSize() == 0 );
	cout << " 0 " << flush;

	// nonempty, same size
	Matrix<double> m1(3, 4);
	Matrix<double> m2(3, 4);
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			m1[i][j] = i*j;
			m2[i][j] = i+j;
		}
	}

	Matrix<double> m3 = m1 + m2;

	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m3[i][j] == i*j + i+j );
		}
	}
	cout << " 1a " << flush;

	// check that left operand did not change
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m1[i][j] == i*j );
		}
	}
	cout << " 1b " << flush;

	// nonempty, different sized rows
	Matrix<double> m4(4,4);
	try {
		m3 = m2 + m4;
		cerr << "operator+ worked with different row sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 2 " << flush;
	}

	// nonempty, different sized columns
	Matrix<double> m5(3,3);
	try {
		m3 = m2 + m5;
		cerr << "operator+ worked with different column	sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 3 " << flush;
	}

	cout << "Passed!" << endl;
}

void MatrixTester::testSubtraction() {
	cout << "Testing -... " << flush;
	// empty
	Matrix<double> m0a, m0b, m0c(3,2);
	m0c = m0a - m0b;
	assert( m0c.getRows() == 0 );
	assert( m0c.getColumns() == 0 );
	assert( m0c.myVec.getSize() == 0 );
	cout << " 0 " << flush;

	// non-empty, valid
	Matrix<double> m1(3, 4);
	Matrix<double> m2(3, 4);
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			m1[i][j] = i*j;
			m2[i][j] = i+j;
		}
	}

	Matrix<double> m3 = m1 - m2;
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m3[i][j] == m1[i][j] - m2[i][j] );
		}
	}
	cout << " 1a " << flush;

	// check that left operand did not change
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m1[i][j] == i*j );
		}
	}
	cout << " 1b " << flush;

	// nonempty, different sized rows
	Matrix<double> m4(4,4);
	try {
		m3 = m2 - m4;
		cerr << "operator- worked with different row sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 2 " << flush;
	}

	// nonempty, different sized columns
	Matrix<double> m5(3,3);
	try {
		m3 = m2 - m5;
		cerr << "operator- worked with different column	sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 3 " << flush;
	}

	cout << "Passed!" << endl;
}

void MatrixTester::testMultiply() {
	cout << "Testing *..." << flush;
	// empty
	Matrix<double> m0a, m0b, m0c(3,2);
	m0c = m0a * m0b;
	assert( m0c.getRows() == 0 );
	assert( m0c.getColumns() == 0 );
	assert( m0c.myVec.getSize() == 0 );
	cout << " 0 " << flush;

	Matrix<double> m1(2, 3);
	Matrix<double> m2(3, 2);
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			m1[i][j] = i+j+1;
			m2[j][i] = i+j+1;
		}
	}

	Matrix<double> m3 = m1 * m2;
	assert( m3.getRows() == 2);
	assert( m3.getColumns() == 2 );
	assert( m3[0][0] == 14 );
	assert( m3[0][1] == 20 );
	assert( m3[1][0] == 20 );
	assert( m3[1][1] == 29 );
	cout << " 1a " << flush;

	// check that left operand did not change
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m1[i][j] == i+j+1 );
		}
	}
	cout << " 1b " << flush;

	// nonempty, m1.columns != m2.rows
	Matrix<double> m4(3,3);
	try {
		m3 = m2 * m4;
		cerr << "operator* worked with bad row/column sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 2 " << flush;
	}

	cout << "Passed!" << endl;
}

void MatrixTester::testReadFromStream() {
	cout << "Testing readFrom(istream)... " << flush;
	ifstream fin("MatrixTest1.txt");
	assert( fin.is_open() );
	unsigned rows, columns;
	fin >> rows >> columns;
	Matrix<double> m(rows, columns);
	m.readFrom(fin);
	for (unsigned i = 0; i < rows; i++) {
		for (unsigned j = 0; j < columns; j++) {
			assert( m[i][j] == i*m.getColumns()+j+1 );
		}
	}

	cout << "Passed!" << endl;
}

void MatrixTester::testReadFromFile() {
	cout << "Testing readFrom(string)... " << flush;
	Matrix<double> m;
	m.readFrom("MatrixTest1.txt");
	assert( m.getRows() == 3 );
	assert( m.getColumns() == 4 );
	for (unsigned i = 0; i < m.getRows(); i++) {
		for (unsigned j = 0; j < m.getColumns(); j++) {
//			assert( m[i][j] == i*m.getColumns()+j+1 );
		}
	}

	cout << "Passed!" << endl;
}

void MatrixTester::testWriteToStream() {
	cout << "Testing writeTo(ostream)... " << flush;
	Matrix<double> m;
	// read a Matrix whose values we know
	m.readFrom("MatrixTest1.txt");
	ofstream fout("MatrixTest1Copy.txt");
	assert( fout.is_open() );
	// now write it to a file via a stream
	fout << m.getRows() << " " << m.getColumns() << "\n";
	m.writeTo(fout);
	fout.close();
	// now, read what we just wrote into a different Matrix
	Matrix<double> m1;
	m1.readFrom("MatrixTest1Copy.txt");
	// and test it
	assert( m1.getRows() == 3 );
	assert( m1.getColumns() == 4 );
	for (unsigned i = 0; i < m.getRows(); i++) {
		for (unsigned j = 0; j < m.getColumns(); j++) {
			assert( m1[i][j] == i*m.getColumns()+j+1 );
		}
	}

	cout << "Passed!" << endl;
}

void MatrixTester::testWriteToFile() {
	cout << "Testing writeTo(string)... " << flush;
	Matrix<double> m;
	// read in a Matrix whose values we know
	m.readFrom("MatrixTest1.txt");
	// write it to a file
	m.writeTo("MatrixTest1Copy2.txt");
	// now, read what we just wrote into a different Matrix
	Matrix<double> m1;
	m1.readFrom("MatrixTest1Copy2.txt");
	// test it
	assert( m1.getRows() == 3 );
	assert( m1.getColumns() == 4 );
	for (unsigned i = 0; i < m.getRows(); i++) {
		for (unsigned j = 0; j < m.getColumns(); j++) {
			assert( m1[i][j] == i*m.getColumns()+j+1 );
		}
	}

	cout << "Passed!" << endl;
}


void MatrixTester::runTests() {
	cout << "Running Matrix tests..." << endl;
	testDefaultConstructor();
	testExplicitConstructor();
	testCopyConstructor();
	testAssignment();
	testEquality();
	testSubscripts();
	testInequality();
	testTranspose();
	testAddition();
	testSubtraction();
	testMultiply();
	testReadFromStream();
	testWriteToStream();
	testReadFromFile();
	testWriteToFile();
	cout << "All tests passed!" << endl;
}

ck45@goldberg:~/workspace/112/proj04$ cat Vec.h
/* Vec.h provides a simple vector class named Vec.
 * Student Name: Chan Kim (ck45)
 * 				 Thomas Woltier (tw34)
 * Date: 03/06/2017
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#ifndef VEC_H_
#define VEC_H_

#include <iostream>
#include <fstream>
#include <stdexcept>    // range_error, ...
#include <cassert>  	// assert, ...
using namespace std;

template<class Item>
class Vec {
public:
	Vec();
	Vec(unsigned size);
	Vec(const Vec& original);
	virtual ~Vec();
	
	Vec& operator=(const Vec& original);
	bool operator==(const Vec& v2);
	bool operator!=(const Vec& v2);
	Vec operator-(const Vec& v2) const;
	Vec operator+(const Vec& v2) const;
	double operator*(const Vec& v2) const;
	Item& operator[](unsigned index);
	const Item& operator[](unsigned index) const;

	unsigned getSize() const { return mySize; }
	void setSize(unsigned newSize);
	void setItem(unsigned index, const Item& it);
	Item getItem(unsigned index) const;


	void writeTo(ostream& out) const;
	void readFrom(istream& in);
	void writeTo(const string& filename) const;
	void readFrom(const string& fileName);

private:
	unsigned mySize;
	Item *   myArray;

	void makeCopy(const Vec& original);

	friend class VecTester;
};
template<class Item>
Vec<Item>::Vec() {
	mySize = 0;
	myArray = NULL;
}
template<class Item>
Vec<Item>::Vec(unsigned size) {
	mySize = size;
	if (size) {
		myArray = new Item[mySize]();
	} else {
		myArray = NULL;
	}

}
template<class Item>
void Vec<Item>::makeCopy(const Vec<Item>& original) {
	mySize = original.mySize;
	if (original.mySize) {
		myArray = new Item[mySize]();
		for (unsigned i = 0; i < original.mySize; i++) {
			myArray[i] = original.myArray[i];
		}
	} else {
		myArray = NULL;
	}
}
template<class Item>
Vec<Item>::Vec(const Vec<Item>& original) {
	makeCopy(original);
}
template<class Item>
Vec<Item>::~Vec() {
	delete [] myArray;
	myArray = NULL;
	mySize = 0;
}

/* setItem
* @param: index, index of the array
* @param: it, the new value for the index
* Return: sets the index in the array to a new Item
*/
template<class Item>
void Vec<Item>::setItem(unsigned index, const Item& it) {
	if (index < 0 || index >= mySize) {
	    throw range_error("out of range");
	}
	myArray[index] = it;
}

/* getItem
* @param: index, index of the array
* Return: returns the Item at the index in the array
*/
template<class Item>
Item Vec<Item>::getItem(unsigned index) const {
	if (index < 0 || index >= mySize) {
		throw range_error("out of range");
	}
	return myArray[index];
}

/* setSize
* @param: newSize, the desired size
* Return: resizes the array to the desired size
*/
template<class Item>
void Vec<Item>::setSize(unsigned newSize) {
	if ( newSize != mySize ){
		if ( newSize == 0 ){
			myArray = NULL;
		} else {
			Item *newArray = new Item[newSize]();
			for (unsigned i = 0; i < newSize; i++) {
				if ( i < mySize){
					newArray[i] = myArray[i];
				}
			}

			delete [] myArray;
			myArray = newArray;
		}
		mySize = newSize;
	}
}

/* [] operator - set
* @param: index, index of the array
* Return: sets the index in the array to a new Item
*/
template<class Item>
Item& Vec<Item>::operator[](unsigned index) {
	if (index < 0 || index >= mySize) {
		throw range_error("out of range");
	}
	return myArray[index];
}

/* [] operator - get
* @param: index, index of the array
* Return: returns the Item at the index in the array
*/
template<class Item>
const Item& Vec<Item>::operator[](unsigned index) const {
	if (index < 0 || index >= mySize) {
		throw range_error("out of range");
	}
	return myArray[index];
}

/* == operator
* @param: v2, the vector for comparison
* Return: compares two vecs and see if they are similar
*/
template<class Item>
bool Vec<Item>::operator==(const Vec<Item>& v2) {
	if (mySize == v2.mySize){
		for( unsigned i = 0; i < mySize; i ++){
			if (myArray[i] != v2.myArray[i]) { return false; }
		}
		return true;
	}
	return false;
}

/* = operator
* @param: original, a vec.
* Return: a vec that has the same properties as original.
*/
template<class Item>
Vec<Item>& Vec<Item>::operator=(const Vec<Item>& original) {
	if ( this != &original) {
		delete [] myArray;
		makeCopy(original);
	}
	return *this;
}

/* + operator
* @param: original, a vec.
* Return: a new vec that has stores the sum of two vecs.
*/
template<class Item>
Vec<Item> Vec<Item>::operator+(const Vec<Item>& v2) const {
	if (mySize != v2.mySize) {
		throw invalid_argument("not the same size");
	}
	Vec addVec(mySize);
	for( unsigned i = 0; i < mySize; i ++){
		addVec[i] = myArray[i] + v2[i];
	}
	return addVec;
}

/* * operator
* @param: original, a vec.
* Return: a new vec that is the dot product of two vecs.
*/
template<class Item>
double Vec<Item>::operator*(const Vec<Item>& v2) const {
	if (mySize != v2.mySize) {
		throw invalid_argument("not the same size");
	}
	double total = 0;
	for( unsigned i = 0; i < mySize; i ++){
		total += myArray[i] * v2[i];
	}
	return total;
}

/* boolean inequality
 * Parameter: v2, a Vec
 * Postcondition: true is returned, if and only if
 * 					mySize != v2.mySize()
 * 					myArray != v3.myArray()
 * 					my values are different to v2's values.
 */
template<class Item>
bool Vec<Item>::operator!=(const Vec<Item>& v2) {
	if (mySize != v2.mySize){
		return true;
	} else if (mySize == v2.mySize) {
		for (unsigned i = 0; i < mySize; i++) {
			if (myArray[i] != v2.myArray[i]) {
				return true;
			}
		}
		return false;
	}
	return false;
}
/* Vector subtraction
 * Parameter: v2, a Vec
 * Precondition: mySize == v2.mySize()
 * Postcondition: a Vec is returned containing the product of
 * 					my values and v2's values.
 */
template<class Item>
Vec<Item> Vec<Item>::operator-(const Vec<Item>& v2) const{
	Vec v3(mySize);
	if (mySize != v2.mySize) {
		throw invalid_argument("Size different");
	} else {
		for (unsigned i = 0; i < mySize; i++ ) {
			v3.myArray[i] = myArray[i]-v2.myArray[i];
		}
		return v3;
	}
}
/* File I/O
 * Parameter: fileName, a string
 * Precondition: fileName is the name of a file,
 * 					the first line of file is mySize,
 * 					and the remainder of which is array values.
 * Postcondition: containing the values from fileName
 */
template<class Item>
void Vec<Item>::readFrom(const string& fileName) {
	ifstream fin( fileName.c_str() );
	assert ( fin.is_open());
	Vec v1(mySize);
	fin >> mySize;
	myArray = new Item[mySize]();
	for (unsigned i = 0; i < mySize; i++ ) {
		fin >> myArray[i];
	}
	fin.close();
}

/* writeTo
* @param: out, the stream to write
* Return: exports the values of the vec
*/
template<class Item>
void Vec<Item>::writeTo(ostream& out) const {
	for( unsigned i = 0; i < mySize; i ++){
		out << myArray[i] << endl;
	}
}

/* writeTo
* @param: filename, the name of the file to write to
* Return: exports the values of the vec
*/
template<class Item>
void Vec<Item>::writeTo(const string& filename) const {
	ofstream fout(filename.c_str());
	assert( fout.is_open() );
	fout << mySize << "\n";
	writeTo(fout);
	fout.close();
}

/* readFrom
* @param: in, the stream from which to read
* Return: reads in values from a stream and sets those values to corresponding index
*/
template<class Item>
void Vec<Item>::readFrom(istream& in) {
	for( unsigned i = 0; i < mySize; i ++){
		in >> myArray[i];
	}
}

#endif /*VEC_H_*/
ck45@goldberg:~/workspace/112/proj04$ cat.  MatrixTest1.txt
3 4
1 2 3 4
5 6 7 8
9 10 11 12

ck45@goldberg:~/workspace/112/proj04$ cat MatrixTest1Copy.ts xt
3 4
1	2	3	4	
5	6	7	8	
9	10	11	12	

ck45@goldberg:~/workspace/112/proj04$ \ cat MatrixTest1Copy2.txt
3	4
1	2	3	4	
5	6	7	8	
9	10	11	12	

ck45@goldberg:~/workspace/112/proj04$ cd Debug
ck45@goldberg:~/workspace/112/proj04/Debug$ make    ls
Application.d  MatrixTester.d  proj04	   tester.d	VecTester.o
Application.o  MatrixTester.o  sources.mk  tester.o
makefile       objects.mk      subdir.mk   VecTester.d
ck45@goldberg:~/workspace/112/proj04/Debug$ make all
make: Nothing to be done for 'all'.
ck45@goldberg:~/workspace/112/proj04/Debug$ cd ..
ck45@goldberg:~/workspace/112/proj04$ ./Debug/proj04
Running Matrix tests...
Testing default constructor... 0  1 Passed!
Testing explicit constructor... 1  2 Passed!
Testing copy constructor...  1  2  Passed!
Testing =...  0  1  2  3  4  5 Passed!
Testing ==...  1  2  3  4 Passed!
Testing subscripts...  1  2  3  4  5  6 Passed!
Testing !=...  0  1  2  3 Passed!
Testing getTranspose()...  0  1a  1b Passed!
Testing +...  0  1a  1b  2  3 Passed!
Testing -...  0  1a  1b  2  3 Passed!
Testing *... 0  1a  1b  2 Passed!
Testing readFrom(istream)... Passed!
Testing writeTo(ostream)... Passed!
Testing readFrom(string)... Passed!
Testing writeTo(string)... Passed!
All tests passed!
Welcome to the Matrix program!
Enter name of file containing the first matrix: MatrixTest1.txt
1	2	3	4	
5	6	7	8	
9	10	11	12	

Choose one of operations
	 1. addition (+)	 2. subtraction (-)	 3. transpose	 other keys. exit
1
Enter name of file containing the second matrix: MatrixTest1.txt
1	2	3	4	
5	6	7	8	
9	10	11	12	

2	4	6	8	
10	12	14	16	
18	20	22	24	

Welcome to the Matrix program!
Enter name of file containing the first matrix: MatrixTest1.txt
1	2	3	4	
5	6	7	8	
9	10	11	12	

Choose one of operations
	 1. addition (+)	 2. subtraction (-)	 3. transpose	 other keys. exit
2
Enter name of file containing the second matrix: MatrixTest1.txt
1	2	3	4	
5	6	7	8	
9	10	11	12	

0	0	0	0	
0	0	0	0	
0	0	0	0	

Welcome to the Matrix program!
Enter name of file containing the first matrix: MatrixTest1.txt
1	2	3	4	
5	6	7	8	
9	10	11	12	

Choose one of operations
	 1. addition (+)	 2. subtraction (-)	 3. transpose	 other keys. exit
3
1	5	9	
2	6	10	
3	7	11	
4	8	12	

Welcome to the Matrix program!
Enter name of file containing the first matrix: Matrix. Test1.txt
1	2	3	4	
5	6	7	8	
9	10	11	12	

Choose one of operations
	 1. addition (+)	 2. subtraction (-)	 3. transpose	 other keys. exit
4
End program...
ck45@goldberg:~/workspace/112/proj04$ exit

Script done on Mon 06 Mar 2017 10:22:48 PM EST
