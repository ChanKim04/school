Script started on Mon 27 Feb 2017 02:04:26 PM EST
mcw33@dijkstra:~/workspace/cs112/proj03$ ls
Application.cpp  Application.h	Debug  tester.cpp  typescript  Vec.cpp	Vec.h  vecStreamOut.txt  vecTest1Copy.txt  vecTest1.txt  vecTest2Copy.txt  vecTest2.txt  VecTester.cpp	VecTester.h
mcw33@dijkstra:~/workspace/cs112/proj03$ cat *.h
/*
 * Application.h
 *
 *  Created on: Feb 27, 2017
 *      Author: mcw33
 */

#ifndef APPLICATION_H_
#define APPLICATION_H_

#include <iostream>
#include <stdlib.h>		/* exit... */
#include <limits>		/* numeric_limits... */
#include "Vec.h"		/* Vec... */
using namespace std;


class Application {
public:
	Application();
	void run();
	void printMenu();
	void handleInput();
	void vectorInput(Vec& v);
	void printResults(const Vec& v) const;
	double numericInput() const;
private:
	unsigned myDimensions;
	Vec startVec;
};

#endif /* APPLICATION_H_ */
/* Vec.h provides a simple vector class named Vec.
 * Student Name: Mark Wissink
 * 				 Chan Kim
 * Date: 2/21/17
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#ifndef VEC_H_
#define VEC_H_

#include <iostream>
#include <fstream>
#include <stdexcept>    // range_error, ...
#include <cassert>  	// assert, ...
using namespace std;

typedef double Item;

class Vec {
public:
	Vec();
	Vec(unsigned size);
	Vec(const Vec& original);
	virtual ~Vec();
	
	Vec& operator=(const Vec& original);
	bool operator==(const Vec& v2);
	bool operator!=(const Vec& v2);
	Vec operator-(const Vec& v2) const;
	Vec operator+(const Vec& v2) const;
	double operator*(const Vec& v2) const;
	Item& operator[](unsigned index);
	const Item& operator[](unsigned index) const;

	unsigned getSize() const { return mySize; }
	void setSize(unsigned newSize);
	void setItem(unsigned index, const Item& it);
	Item getItem(unsigned index) const;


	void writeTo(ostream& out) const;
	void readFrom(istream& in);
	void writeTo(const string& filename) const;
	void readFrom(const string& fileName);

private:
	unsigned mySize;
	Item *   myArray;

	void makeCopy(const Vec& original);

	friend class VecTester;
};

#endif /*VEC_H_*/
/* VecTester.h provides unit tests for Vec, a simple vector class.
 * Student Name: Mark Wissink
 * Date: 2/21/17
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */
 
#ifndef VECTESTER_H_
#define VECTESTER_H_

#include "Vec.h"

class VecTester {
public:
	void runTests() const;
	void testDefaultConstructor() const;
	void testExplicitConstructor() const;
	void testDestructor() const;
	void testGetSize() const;
	void testSetItem() const;
	void testGetItem() const;
	void testSetSize() const;
	void testCopyConstructor() const;
	void testSubscript() const;
	void testAssignment() const;
	void testEquality() const;
	void testWriteToStream() const;
	void testReadFromStream() const;
	void testInequality() const;
	void testAddition() const;
	void testSubtraction() const;
	void testDotProduct() const;
	void testReadFromFile() const;
	void testWriteToFile() const;
};

#endif /*VECTESTER_H_*/
mcw33@dijkstra:~/workspace/cs112/proj03$ cat *.cpp
/*
 * Application.cpp
 *
 *  Created on: Feb 27, 2017
 *      Author: mcw33
 */

#include "Application.h"

Application::Application() {}

void Application::run() {
	cout << "Welcome to the Vector Application! \n \n" << endl;
	cout << "Please enter the number of dimensions to work with: " << endl;
	myDimensions = numericInput();
	cout << "Please enter values for the starting vector: " << endl;
	Vec newVec(myDimensions);
	vectorInput(newVec);
	startVec = newVec;

	printMenu();
}

/* Prints the menu
* Return: void.
*/
void Application::printMenu() {
	cout << "Please enter: "
		 << "\n\t 1 - to append a new vector"
		 << "\n\t 2 - to print results"
		 << "\n\t 0 - to quit"
	<< endl;
	handleInput();

	printMenu();
}

/* handles the menu input
* Return: void.
*/
void Application::handleInput() {
	unsigned input;
	input = numericInput();
	if ( input == 1 ) {
		cout << "Enter a new vector: " << endl;
		Vec newVec(myDimensions);
		vectorInput(newVec);
		startVec = startVec + newVec;
	} else if ( input == 2 ) {
		printResults(startVec);
	} else if ( input == 0 ) {
		exit(1);
	}
}

void Application::vectorInput(Vec& v) {
	for ( unsigned i = 0; i < v.getSize(); i ++ ){
		cout << "Enter value for index " << i << ": " << endl;
		v[i] = numericInput();
	}
}

void Application::printResults(const Vec& v) const {
	cout << "The resulting vector is: {" << flush;
	for ( unsigned i = 0; i < v.getSize()-1; i ++ ){
		cout << v[i] << ", " << flush;
	}
	cout << v[v.getSize()-1] << "}" << endl;
}

double Application::numericInput() const {
	double x;
	while(!(cin >> x)){
		cin.clear();
		cin.ignore(numeric_limits<streamsize>::max(), '\n');
		cout << "Invalid input.  Try again: ";
	}
	return x;
}
/* tester.cpp drives the testing of our Vec class.
 * Student:
 * Date:
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#include "VecTester.h"
#include "Application.h"

int main() {
	VecTester vt;
	vt.runTests();
	Application app;
	app.run();
}
/* Vec.cpp defines the methods for Vec, a simple vector class.
 * Student Name: Mark Wissink
 * 				 Chan Kim
 * Date: 2/21/17
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */
 
#include "Vec.h"

Vec::Vec() {
	mySize = 0;
	myArray = NULL;
}

Vec::Vec(unsigned size) {
	mySize = size;
	if (size) {
		myArray = new Item[mySize]();
	} else {
		myArray = NULL;
	}

}

void Vec::makeCopy(const Vec& original) {
	mySize = original.mySize;
	if (original.mySize) {
		myArray = new Item[mySize]();
		for (unsigned i = 0; i < original.mySize; i++) {
			myArray[i] = original.myArray[i];
		}
	} else {
		myArray = NULL;
	}
}

Vec::Vec(const Vec& original) {
	makeCopy(original);
}

Vec::~Vec() {
	delete [] myArray;
	myArray = NULL;
	mySize = 0;
}

/* setItem
* @param: index, index of the array
* @param: it, the new value for the index
* Return: sets the index in the array to a new Item
*/
void Vec::setItem(unsigned index, const Item& it) {
	if (index < 0 || index >= mySize) {
	    throw range_error("out of range");
	}
	myArray[index] = it;
}

/* getItem
* @param: index, index of the array
* Return: returns the Item at the index in the array
*/
Item Vec::getItem(unsigned index) const {
	if (index < 0 || index >= mySize) {
		throw range_error("out of range");
	}
	return myArray[index];
}

/* setSize
* @param: newSize, the desired size
* Return: resizes the array to the desired size
*/
void Vec::setSize(unsigned newSize) {
	if ( newSize != mySize ){
		if ( newSize == 0 ){
			myArray = NULL;
		} else {
			Item *newArray = new Item[newSize]();
			for (unsigned i = 0; i < newSize; i++) {
				if ( i < mySize){
					newArray[i] = myArray[i];
				}
			}

			delete [] myArray;
			myArray = newArray;
		}
		mySize = newSize;
	}
}

/* [] operator - set
* @param: index, index of the array
* Return: sets the index in the array to a new Item
*/
Item& Vec::operator[](unsigned index) {
	if (index < 0 || index >= mySize) {
		throw range_error("out of range");
	}
	return myArray[index];
}

/* [] operator - get
* @param: index, index of the array
* Return: returns the Item at the index in the array
*/
const Item& Vec::operator[](unsigned index) const {
	if (index < 0 || index >= mySize) {
		throw range_error("out of range");
	}
	return myArray[index];
}

/* == operator
* @param: v2, the vector for comparison
* Return: compares two vecs and see if they are similar
*/
bool Vec::operator==(const Vec& v2) {
	if (mySize == v2.mySize){
		for( unsigned i = 0; i < mySize; i ++){
			if (myArray[i] != v2.myArray[i]) { return false; }
		}
		return true;
	}
	return false;
}

/* = operator
* @param: original, a vec.
* Return: a vec that has the same properties as original.
*/
Vec& Vec::operator=(const Vec& original) {
	if ( this != &original) {
		delete [] myArray;
		makeCopy(original);
	}
	return *this;
}

/* + operator
* @param: original, a vec.
* Return: a new vec that has stores the sum of two vecs.
*/
Vec Vec::operator+(const Vec& v2) const {
	if (mySize != v2.mySize) {
		throw invalid_argument("not the same size");
	}
	Vec addVec(mySize);
	for( unsigned i = 0; i < mySize; i ++){
		addVec[i] = myArray[i] + v2[i];
	}
	return addVec;
}

/* * operator
* @param: original, a vec.
* Return: a new vec that is the dot product of two vecs.
*/
double Vec::operator*(const Vec& v2) const {
	if (mySize != v2.mySize) {
		throw invalid_argument("not the same size");
	}
	double total = 0;
	for( unsigned i = 0; i < mySize; i ++){
		total += myArray[i] * v2[i];
	}
	return total;
}

/* boolean inequality
 * Parameter: v2, a Vec
 * Postcondition: true is returned, if and only if
 * 					mySize != v2.mySize()
 * 					myArray != v3.myArray()
 * 					my values are different to v2's values.
 */
bool Vec::operator!=(const Vec& v2) {
	if (mySize != v2.mySize){
		return true;
	} else if (mySize == v2.mySize) {
		for (unsigned i = 0; i < mySize; i++) {
			if (myArray[i] != v2.myArray[i]) {
				return true;
			}
		}
		return false;
	}
	return false;
}
/* Vector subtraction
 * Parameter: v2, a Vec
 * Precondition: mySize == v2.mySize()
 * Postcondition: a Vec is returned containing the product of
 * 					my values and v2's values.
 */
Vec Vec::operator-(const Vec& v2) const{
	Vec v3(mySize);
	if (mySize != v2.mySize) {
		throw invalid_argument("Size different");
	} else {
		for (unsigned i = 0; i < mySize; i++ ) {
			v3.myArray[i] = myArray[i]-v2.myArray[i];
		}
		return v3;
	}
}
/* File I/O
 * Parameter: fileName, a string
 * Precondition: fileName is the name of a file,
 * 					the first line of file is mySize,
 * 					and the remainder of which is array values.
 * Postcondition: containing the values from fileName
 */
void Vec::readFrom(const string& fileName) {
	ifstream fin( fileName.c_str() );
	assert ( fin.is_open());
	Vec v1(mySize);
	fin >> mySize;
	myArray = new Item[mySize]();
	for (unsigned i = 0; i < mySize; i++ ) {
		fin >> myArray[i];
	}
	fin.close();
}

/* writeTo
* @param: out, the stream to write
* Return: exports the values of the vec
*/
void Vec::writeTo(ostream& out) const {
	for( unsigned i = 0; i < mySize; i ++){
		out << myArray[i] << endl;
	}
}

/* writeTo
* @param: filename, the name of the file to write to
* Return: exports the values of the vec
*/
void Vec::writeTo(const string& filename) const {
	ofstream fout(filename.c_str());
	assert( fout.is_open() );
	fout << mySize << "\n";
	writeTo(fout);
	fout.close();
}

/* readFrom
* @param: in, the stream from which to read
* Return: reads in values from a stream and sets those values to corresponding index
*/
void Vec::readFrom(istream& in) {
	for( unsigned i = 0; i < mySize; i ++){
		in >> myArray[i];
	}
}
/* VecTester.cpp defines the unit test-methods for Vec, a simple vector class.
 * Student Name: Mark Wissink
 * Date: 2/21/17
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */
 
#include "VecTester.h"
#include <iostream>     // cout, cerr, ...
#include <fstream>      // ifstream, ofstream, ...
#include <cassert>      // assert()
#include <cstdlib>      // exit()
#include <stdexcept>    // range_error, ...
using namespace std;

void VecTester::runTests() const {
	cout << "Testing class Vec" << endl;
	testDefaultConstructor();
	testExplicitConstructor();
	testCopyConstructor();
	testDestructor();
	testSubscript();
	testAssignment();
	testGetSize();
	testSetItem();
	testGetItem();
	testSetSize();
	testEquality();
	testWriteToStream();
	testReadFromStream();
	testInequality();
	testAddition();
	testSubtraction();
	testDotProduct();
	testReadFromFile();
	testWriteToFile();
	cout << "All tests passed!" << endl;
}

void VecTester::testDefaultConstructor() const {
	cout << "Testing default constructor... " << flush;
	Vec v;
	assert( v.mySize == 0 );
	assert( v.myArray == NULL );
	cout << "Passed!" << endl;
}

void VecTester::testExplicitConstructor() const {
	cout << "Testing explicit constructor... " << flush;
	cout << " 1 " << flush;
	Vec v1(3);
	assert( v1.mySize == 3 );
	assert( v1.myArray != NULL );
	for (int i = 0; i < 3; i++) {
		assert( v1.myArray[i] == 0 );
	}
	cout << " 2 " << flush;
	Vec v2(8);
	assert( v2.mySize == 8 );
	assert( v2.myArray != NULL );
	for (int i = 0; i < 8; i++) {
		assert( v2.myArray[i] == 0 );
	}
	cout << " 3 " << flush;
	Vec v3(0);
	assert( v3.mySize == 0 );
	assert( v3.myArray == NULL );
	cout << " 4 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testCopyConstructor() const {
	cout << "Testing copy constructor..." << flush;
	cout << " 1 " << flush;
	Vec v1;
	Vec v2(v1);
	assert( v2.mySize == 0 );
	assert( v2.myArray == NULL);

	cout << " 2 " << flush;
	Vec v3(5);
	Vec v4(v3);
	assert(v4.mySize == 5);
	assert(v4.myArray != NULL);
	assert(v4.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v4.myArray[i] == 0 );
	}

	cout << " 3 " << flush;
	Vec v5(5);
	for (unsigned i = 0; i < 5; i++) {
		v5.myArray[i] = (i+1);
	}
	Vec v6(v5);
	assert( v6.mySize == 5 );
	assert( v6.myArray != NULL );
	assert( v6.myArray != v5.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v6.myArray[i] == v5.myArray[i] );
	}
	cout << "Passed!" << endl;
}

void VecTester::testDestructor() const {
	cout << "Testing destructor... " << flush;
	Vec v(5);
	v.~Vec();
	assert( v.mySize == 0 );
	assert( v.myArray == NULL );
	cout << "Passed, but make sure ~Vec() is returning the array's memory to the system!" << endl;
}

void subscriptConstCheck(const Vec& v) {
	assert(v.getSize() == 3);
	assert(v[0] == 1);
	assert(v[1] == 2);
	assert(v[2] == 3);
}

void VecTester::testSubscript() const {
	cout << "Testing Subscript... " << flush;
	Vec v(3);
	v[0] = 1;
	v[1] = 2;
	v[2] = 3;
	for (unsigned i = 0; i < v.getSize(); i++) {
		assert(v[i] == i+1);
	}
	subscriptConstCheck(v);
}
void VecTester::testAssignment() const {
	cout << "Testing =..." << flush;
	// empty-to-empty
	Vec v, v0;
	v = v0;
	assert(v.mySize == 0);
	assert(v.myArray == NULL);
	cout << " 0 " << flush;
	// empty-to-nonempty
	Vec v1;
	Vec v2(5);
	v2 = v1;
	assert(v2.mySize == 0);
	assert(v2.myArray == NULL);
	cout << " 1 " << flush;
	// nonempty-to-empty
	Vec v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3.myArray[i] = (i+1);
	}
	Vec v4;
	v4 = v3;
	assert( v4.mySize == 5 );
	assert( v4.myArray != v3.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v4.myArray[i] == (i+1) );
	}
	cout << " 2 " << flush;
	// nonempty-to-nonempty (larger into smaller)
	Vec v5(2);
	for (unsigned i = 0; i < 2; i++) {
		v5.myArray[i] = (i+1)*10;
	}
	v5 = v3;
	assert(v5.mySize == 5);
	assert(v5.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v5.myArray[i] == (i+1) );
	}
	cout << " 3 " << flush;
	// nonempty-to-nonempty (smaller into larger)
	Vec v6(7);
	for (unsigned i = 0; i < 7; i++) {
		v6.myArray[i] = (i+1)*10;
	}
	v6 = v3;
	assert(v6.mySize == 5);
	assert(v6.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v6.myArray[i] == (i+1) );
	}
	cout << " 4 " << flush;
	// nonempty-to-nonempty (equal sized)
	Vec v7(5);
	for (unsigned i = 0; i < 5; i++) {
		v7.myArray[i] = (i+1)*10;
	}
	v7 = v3;
	assert(v7.mySize == 5);
	assert(v7.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v7.myArray[i] == (i+1) );
	}
	cout << " 5 " << flush;
	// assignment chaining
	Vec v8;
	Vec v9(4);
	v9 = v8 = v3;
	assert( v9.mySize == 5 );
	assert( v9.mySize == 5 );
	assert( v8.myArray != v3.myArray );
	assert( v8.myArray != v3.myArray );
	assert( v9.myArray != v8.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v8.myArray[i] == (i+1) );
		assert( v9.myArray[i] == (i+1) );
	}
	cout << " 6 " << flush;
	// self-assignment (idiotic but legal)
	v3 = v3;
	assert( v3.mySize == 5 );
	assert( v3.myArray != NULL );
	for (unsigned i = 0; i < 5; i++) {
		assert(v3.myArray[i] == (i+1) );
	}
	cout << " 7 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testGetSize() const {
	cout << "Testing getSize()..." << flush;
	Vec v1;
	assert( v1.getSize() == 0 );
	cout << " 1 " << flush;
	Vec v2(5);
	assert( v2.getSize() == 5 );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testSetItem() const {
	cout << "Testing setItem()... " << flush;
	// empty case
	Vec v0;
	try {
		v0.setItem(0, 11);
		cerr << "setItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// nonempty case, valid subscript
	Vec v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v.myArray[i] == (i+1) );
	}
	cout << " 1 " << flush;
	// nonempty case, invalid subscript
	Vec v2(3);
	try {
		v2.setItem(3, 33);
		cerr << "setItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testGetItem() const {
	cout << "Testing getItem()... " << flush;
	// empty Vec
	Vec v0;
	try {
		v0.getItem(0);
		cerr << "getItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// non-empty, valid access
	Vec v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v.getItem(i) == (i+1) );
	}
	cout << " 1 " << flush;
	// nonempty Vec, invalid index
	Vec v2(3);
	try {
		v2.getItem(3);
		cerr << "getItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testSetSize() const {
	cout << "Testing setSize()..." << flush;
	// empty
	Vec v0;
	v0.setSize(3);
	assert( v0.getSize() == 3 );
	for (unsigned i = 0; i < 3; i++) {
		assert( v0.getItem(i) == 0 );
	}
	cout << " 0 " << flush;

	// non-empty, increasing
	Vec v1(5);
	for (unsigned i = 0; i < 5; i++) {
		v1.setItem(i, i+1);
	}
	Item * saveAddress = v1.myArray;
	v1.setSize(8);
	assert( v1.getSize() == 8 );
	for (unsigned i = 0; i < 5; i++) {
		assert( v1.getItem(i) == (i+1) );
	}
	for (unsigned i = 5; i < 8; i++) {
		assert( v1.getItem(i) == 0 );
	}
	assert( v1.myArray != saveAddress );
	cout << " 1 " << flush;

	// non-empty, decreasing
	Vec v2(5);
	for (unsigned i = 0; i < 5; i++) {
		v2.setItem(i, i+1);
	}
	saveAddress = v2.myArray;
	v2.setSize(3);
	assert( v2.getSize() == 3 );
	for (unsigned i = 0; i < 3; i++) {
		assert( v2.getItem(i) == (i+1) );
	}
	assert( v2.myArray != saveAddress );
	cout << " 2 " << flush;

	// non-empty, same-size
	Vec v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3.setItem(i, i+1);
	}
	saveAddress = v3.myArray;
	v3.setSize(5);
	assert( v3.getSize() == 5 );
	for (unsigned i = 0; i < 5; i++) {
		assert( v3.getItem(i) == (i+1) );
	}
	assert( v3.myArray == saveAddress );
	cout << " 3 " << flush;
	// set size to zero
	v3.setSize(0);
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 4 " << flush;
	cout << "Passed!" << endl;
}


void VecTester::testEquality() const {
	cout << "Testing ==..." << flush;
	// empty case
	Vec v1;
	Vec v2;
	assert( v1 == v2 );
	cout << " 1 " << flush;

	// nonempty, same size, default values
	Vec v3(5);
	Vec v4(5);
	assert( v3 == v4 );
	cout << " 2 " << flush;

	// nonempty, same size, set values
	Vec v5(5);
	Vec v6(5);
	for (unsigned i = 0; i < 5; i++) {
		v5.setItem(i, i+1);
		v6.setItem(i, i+1);
	}
	assert( v5 == v6 );
	cout << " 3 " << flush;

	// empty vs nonempty
	Vec v7;
	Vec v8(5);
	assert( !(v7 == v8) );
	cout << " 4 " << flush;

	// nonempty, same size, first value different
	Vec v9(5);
	Vec v10(5);
	Vec v11(5);
	Vec v12(5);
	v10.setItem(0, 1);
	assert( !(v9 == v10) );
	cout << " 5 " << flush;

	// nonempty, same size, middle value different
	v11.setItem(2, 1);
	assert( !(v9 == v11) );
	cout << " 6 " << flush;

	// nonempty, same size, last value different
	v12.setItem(4, 1);
	assert( !(v9 == v12) );
	cout << " 7 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testWriteToStream() const {
      cout << "Testing writeTo(ostream)... " << flush;
      Vec v1(5);
      for (unsigned i = 0; i < 5; i++) {
              v1.setItem(i, i+10);
      }
	// write to an ofstream instead of cout, to automate the test
      ofstream fout("vecStreamOut.txt");
      assert( fout.is_open() );
      fout << v1.getSize() << "\n";
      v1.writeTo(fout);
	fout.close();
	// now read in what we just wrote...
      ifstream fin("vecStreamOut.txt");
      assert( fin.is_open() );
      unsigned size;
      fin >> size;
      assert( size == 5 );
      double value;
      for (unsigned i = 0; i < 5; i++) {
		  fin >> value;
		  assert( value == i+10 );
      }
      cout << "Passed! See 'vecStreamOut.txt' for values..." <<
      endl;
}

void VecTester::testReadFromStream() const {
      cout << "Testing readFrom(istream)... " << flush;
	// an ifstream is-an istream, so use one to automate the test
      ifstream fin("vecStreamOut.txt");
      assert( fin.is_open() );
	// get the size and build the Vec
      unsigned size;
      fin >> size;
      assert( size == 5 );
      Vec v(size);
	// test readFrom()
      v.readFrom(fin);
      for (unsigned i = 0; i < 5; i++) {
              assert( v.getItem(i)== i+10 );
      }
	fin.close();
      cout << "Passed!" << endl;
}

void VecTester::testInequality() const {
	cout << "Testing !=... " << flush;
	// empty
	Vec v0;
	Vec v1;
	assert( !(v0 != v1) );
	cout << " 0 " << flush;
	// empty vs nonempty
	Vec v2(3);
	assert( v1 != v2 );
	cout << " 1 " << flush;
	// equal sized, same values
	Vec v3(3);
	Vec v4(3);
	assert( !(v3 != v4) );
	cout << " 2 " << flush;
	// equal sized, different values
	for (unsigned i = 0; i < 3; i++) {
		v4.myArray[i] = i+1;
	}
	assert( v3 != v4 );
	cout << " 3 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testAddition() const {
	cout << "Testing +... " << flush;
	// nonempty
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;    // for test 2 below
	Vec v3 = v1 + v2;
	assert( v3.getItem(0) == 3 );
	assert( v3.getItem(1) == 6 );
	assert( v3.getItem(2) == 9 );
	cout << " 1 " << flush;
	// addition should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	v3 = v4 + v5;
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 3 " << flush;
	// different sizes
	try {
		v3 = v2 + v4;
		cerr << "v2 + v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testSubtraction() const {
	cout << "Testing -... " << flush;
	// nonempty
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;  // for test 2 below
	Vec v3 = v1 - v2;
	assert( v3.getItem(0) == -1 );
	assert( v3.getItem(1) == -2 );
	assert( v3.getItem(2) == -3 );
	cout << " 1 " << flush;
	// subtraction should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	v3 = v4 - v5;
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 3 " << flush;
	// different sizes
	try {
		v3 = v2 - v4;
		cerr << "v2 - v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testDotProduct() const {
	cout << "Testing *... " << flush;
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;  // for test 2 below
	double product = v1 * v2;
	assert( product == 28 );
	cout << " 1 " << flush;
	// dot product should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	product = v4 * v5;
	assert( product == 0 );
	cout << " 3 " << flush;
	// different sizes
	try {
		product = v2 * v4;
		cerr << "v2 * v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testReadFromFile() const {
	cout << "Testing readFrom()... " << flush;
	Vec v1;
	v1.readFrom("vecTest1.txt");
	assert( v1.getSize() == 3 );
	assert( v1.myArray != NULL );
	assert( v1.getItem(0) == 1 );
	assert( v1.getItem(1) == 2 );
	assert( v1.getItem(2) == 3 );
	cout << " 1 " << flush;

	Vec v2(5);
	Item* oldAddr = v2.myArray;
	v2.readFrom("vecTest2.txt");
	assert( v2.getSize() == 4 );
	cout << " 2 " << flush;
	assert( v2.myArray != NULL );
	assert( v2.getItem(0) == 2 );
	assert( v2.getItem(1) == 4 );
	assert( v2.getItem(2) == 6 );
	assert( v2.getItem(3) == 8 );
       /* the last assertion assumes that the new array's base
        *  address is different from the old array's base address,
        *  which may not be true. If your method seems to be right,
	*  is correctly using delete to deallocate the old array,
        *  and passes all assertions except this one, you may
        *  comment out this assertion.
        */
	assert( v2.myArray != oldAddr );
	cout << " 3 " << flush;
	cout << "Passed! Make sure you close the file..." << endl;
}

void VecTester::testWriteToFile() const {
	cout << "Testing writeTo()... " << flush;
	// read a vector we know into an empty Vec...
	Vec v1;
	v1.readFrom("vecTest1.txt");
	// make a copy of it in a different file
	v1.writeTo("vecTest1Copy.txt");
	cout << " 1 " << flush;
	cout << "vecTest1Copy.txt created " << flush;
	// read in the copy, and check it
	Vec v3;
	v3.readFrom("vecTest1Copy.txt");
      assert( v3.getSize() == 3 );
      assert( v3.myArray != NULL );
      assert( v3.getItem(0) == 1 );
      assert( v3.getItem(1) == 2 );
      assert( v3.getItem(2) == 3 );
      cout << " 2 " << flush;

	// read a vector we know into a nonempty Vec...
	Vec v2(5);
	v2.readFrom("vecTest2.txt");
	// make a copy of it in a different file
	v2.writeTo("vecTest2Copy.txt");
	cout << " 3 " << flush;
	cout << "vecTest2Copy.txt created " << flush;
	// read in the copy and check it
	v3.readFrom("vecTest2Copy.txt");
      assert( v3.getSize() == 4 );
      assert( v3.myArray != NULL );
      assert( v3.getItem(0) == 2 );
      assert( v3.getItem(1) == 4 );
      assert( v3.getItem(2) == 6 );
      assert( v3.getItem(3) == 8 );
      cout << " 4 " << flush;
	cout << "Passed!  Make sure you closed the file..." << endl;
}

mcw33@dijkstra:~/workspace/cs112/proj03$ cat     ls
Application.cpp  Application.h	Debug  tester.cpp  typescript  Vec.cpp	Vec.h  vecStreamOut.txt  vecTest1Copy.txt  vecTest1.txt  vecTest2Copy.txt  vecTest2.txt  VecTester.cpp	VecTester.h
mcw33@dijkstra:~/workspace/cs112/proj03$ cat vecStreamOut.txt
5
10
11
12
13
14
mcw33@dijkstra:~/workspace/cs112/proj03$ cat vecTt estC 1Copy.txt
3
1
2
3
mcw33@dijkstra:~/workspace/cs112/proj03$ cat V vecTest1.tst  xt
3
1
2
3

mcw33@dijkstra:~/workspace/cs112/proj03$ cat vecTest2Copy.tsx  xt
4
2
4
6
8
mcw33@dijkstra:~/workspace/cs112/proj03$ cat vecTest2.txt
4
2
4
6
8

mcw33@dijkstra:~/workspace/cs112/proj03$ cd Debug
mcw33@dijkstra:~/workspace/cs112/proj03/Debug$ ls
Application.d  Application.o  makefile	objects.mk  proj03  sources.mk	subdir.mk  tester.d  tester.o  Vec.d  Vec.o  VecTester.d  VecTester.o
mcw33@dijkstra:~/workspace/cs112/proj03/Debug$ make all
make: Nothing to be done for 'all'.
mcw33@dijkstra:~/workspace/cs112/proj03/Debug$ cd ..
mcw33@dijkstra:~/workspace/cs112/proj03$ ./Debug/proj03
Testing class Vec
Testing default constructor... Passed!
Testing explicit constructor...  1  2  3  4 Passed!
Testing copy constructor... 1  2  3 Passed!
Testing destructor... Passed, but make sure ~Vec() is returning the array's memory to the system!
Testing Subscript... Testing =... 0  1  2  3  4  5  6  7 Passed!
Testing getSize()... 1  2 Passed!
Testing setItem()...  0  1  2 Passed!
Testing getItem()...  0  1  2 Passed!
Testing setSize()... 0  1  2  3  4 Passed!
Testing ==... 1  2  3  4  5  6  7 Passed!
Testing writeTo(ostream)... Passed! See 'vecStreamOut.txt' for values...
Testing readFrom(istream)... Passed!
Testing !=...  0  1  2  3 Passed!
Testing +...  1  2  3  4 Passed!
Testing -...  1  2  3  4 Passed!
Testing *...  1  2  3  4 Passed!
Testing readFrom()...  1  2  3 Passed! Make sure you close the file...
Testing writeTo()...  1 vecTest1Copy.txt created  2  3 vecTest2Copy.txt created  4 Passed!  Make sure you closed the file...
All tests passed!
Welcome to the Vector Application! 
 

Please enter the number of dimensions to work with: 
3
Please enter values for the starting vector: 
Enter value for index 0: 
0
Enter value for index 1: 
0
Enter value for index 2: 
0
Please enter: 
	 1 - to append a new vector
	 2 - to print results
	 0 - to quit
1
Enter a new vector: 
Enter value for index 0: 
5
Enter value for index 1: 
6
Enter value for index 2: 
7
Please enter: 
	 1 - to append a new vector
	 2 - to print results
	 0 - to quit
1
Enter a new vector: 
Enter value for index 0: 
1
Enter value for index 1: 
2
Enter value for index 2: 
3
Please enter: 
	 1 - to append a new vector
	 2 - to print results
	 0 - to quit
2
The resulting vector is: {6, 8, 10}
Please enter: 
	 1 - to append a new vector
	 2 - to print results
	 0 - to quit
0
mcw33@dijkstra:~/workspace/cs112/proj03$ exit

Script done on Mon 27 Feb 2017 02:06:40 PM EST
