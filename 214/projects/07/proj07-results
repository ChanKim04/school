Script started on 2018-04-03 04:25:01-0400
]0;chan@chan:~/Sources/school/214/projects/07[chan@chan 07]$ make ajva[K[K[K[Kjava
javac -deprecation NameTester.java
]0;chan@chan:~/Sources/school/214/projects/07[chan@chan 07]$ java NameTester 
John Paul Jones
Dwight David Eisenhower
Eisenhower, Dwight D.
Enter the first name...
first
Enter the middle name...
middle
Enter the last name...
last
first middle last
All tests passed!
]0;chan@chan:~/Sources/school/214/projects/07[chan@chan 07]$ cat NameTester.java
/* NameTester.java is a 'driver' to test class Name.
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Student: Chan Kim (ck45)
 * Date: 4/3/2018
 ************************************************************/
import java.io.*;
import java.util.Scanner;

public class NameTester  
{
  public static void main(String[] args)
  {
      Name aName = new Name("John", "Paul", "Jones");
      
      assert aName.getFirst().equals("John") ;
      assert aName.getMiddle().equals("Paul") ;
      assert aName.getLast().equals("Jones") ;

      System.out.println(aName);
      assert aName.toString().equals("John Paul Jones");
      // test for the result of project 7
      Scanner keyboard = new Scanner(System.in);
      aName.setFirst("Dwight");
      assert aName.getFirst().equals("Dwight");
      aName.setMiddle("David");
      assert aName.getMiddle().equals("David");    
      aName.setLast("Eisenhower");
      assert aName.getLast().equals("Eisenhower");
      assert aName.lfmi().equals("Eisenhower" + ", " + "Dwight" + " " + "David".charAt(0) + ".");
      System.out.println(aName);
      System.out.println(aName.lfmi());
      //  type "first" as the first name, "middle" as the middle name, and "last" as the last name for the test.
      aName.read(keyboard);
      assert aName.getFirst().equals("first") ;
      assert aName.getMiddle().equals("middle") ;
      assert aName.getLast().equals("last") ;

      System.out.println(aName);
      assert aName.toString().equals("first middle last");    

      System.out.println("All tests passed!");
  }
}

class Name
{
  private String myFirst, myMiddle, myLast;
  
  public Name(String first, String middle,String last)
  {
    myFirst = first;
    myMiddle = middle;
    myLast = last;
  };

  public String getFirst()
  {
    return myFirst;
  };

  public String getMiddle()
  {
    return myMiddle;
  };

  public String getLast()
  {
    return myLast;
  };  

  public String toString()
  {
    return myFirst + ' ' + myMiddle + ' ' + myLast;
  };

  public void print()
  {
    System.out.println( toString() );
  };

  /*
 setFirst sets the first name of a name object.;
 Receive: aFirst, a String.                       
 Return: the new first name.   
  */  
  public void setFirst(String aFirst)
  {
    myFirst = aFirst;
  };

  /*
 setMiddle sets the middle name of a name object.;
 Receive: aMiddle, a String.                       
 Return: the new middle name.   
  */  
   public void setMiddle(String aMiddle)
  {
    myMiddle = aMiddle;
  };

  /*
 setLast sets the last name of a name object.;
 Receive: aLast, a String.                       
 Return: the new last name.   
  */  
  public void setLast(String aLast)
  {
    myLast = aLast;
  };

  /*
 lfmi returns a full name in L-F-M(the first letter) order. 
 Return: myLast, myFirst, myMiddle[0].    
  */
  public String lfmi()
  {
    return myLast + ", " + myFirst + " " + myMiddle.charAt(0) + ".";
  };

  /*
 readName constructs(or reconstructs)            
          a name from user inputs.               
 Receive: first, middle and last, three strings. 
 Return: the triplet (first middle last).          
  */
  public void read(Scanner keyboard)
  {
      System.out.println("Enter the first name...");
      myFirst = keyboard.nextLine();
      System.out.println("Enter the middle name...");      
      myMiddle = keyboard.nextLine();
      System.out.println("Enter the last name...");      
      myLast = keyboard.nextLine();    
  }

};]0;chan@chan:~/Sources/school/214/projects/07[chan@chan 07]$ exit
exit

Script done on 2018-04-03 04:25:40-0400
Script started on 2018-04-03 04:16:56-0400
]0;chan@chan:~/Sources/school/214/projects/07[chan@chan 07]$ make ada
gnatmake name_tester -gnata
gcc -c -gnata name_tester.adb
gnatbind -x name_tester.ali
gnatlink name_tester.ali
]0;chan@chan:~/Sources/school/214/projects/07[chan@chan 07]$ cat name_tester.adb 
-- namer.adb "test-drives" the Name type.
-- Begun by: Prof. Adams, CS 214 at Calvin College.
-- Completed by: Chan Kim (ck45)
-- Date: 4/3/2018
----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;

procedure name_tester is

  -- replace this line with the definition of NAME_SIZE
  NAME_SIZE : constant Integer := 10;
  -- replace this line with the definition of Name
  type Name is
    record
      myFirst, myMiddle, myLast : String(1..NAME_SIZE);
    end record;

  aName : Name ;

  ----------------------------------------------
  -- Init initializes a Name variable          -
  -- Receive: theName, the Name variable;      -
  --          First, the first name;           -
  --          Middle, the middle name;         -
  --          Last, the last name.             -
  -- Return: theName, its fields set to First, -
  --               Middle, and Last.           -
  ----------------------------------------------

  -- replace this line with the definition of Init()
  procedure  Init(TheName: out Name; First, Middle, Last : in String) is
  begin
    TheName.myFirst := First;
    TheName.myMiddle := Middle;
    TheName.myLast := Last;
  end Init;

  ----------------------------------------------
  -- getFirst(Name) retrieves Name.myFirst        -
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: theName.myFirst.                  -
  ----------------------------------------------

  -- replace this line with the definition of getFirst()
  function getFirst (TheName : in Name) return String is
  begin
    return TheName.myFirst;
  end getFirst;

  -- replace this line with the doc and def of getMiddle()
  function getMiddle (TheName : in Name) return String is
  begin
    return TheName.myMiddle;
  end getMiddle;

  -- replace this line with the doc and def of getLast()
  function getLast (TheName : in Name) return String is
  begin
    return TheName.myLast;
  end getLast;

  -----------------------------------------------
  -- getFullName(Name) retrieves Name as a String  -
  -- Receive: theName, a Name.                  -
  -- PRE: theName has been initialized.         -
  -- Return: a String representation of theName -
  -----------------------------------------------

  -- replace this line with the definition of getFullName()
  function getFullName (TheName : in Name) return String is
  begin
    return TheName.myFirst & " " & TheName.myMiddle & " " & TheName.myLast;
  end getFullName;

    ----------------------------------------------
  -- setFirst(Name) sets Name.myFirst        -
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: theName.myFirst.                  -
  ----------------------------------------------

  procedure setFirst (TheName: out Name; First : in String) is
  begin
    TheName.myFirst := First;
  end setFirst;

    ----------------------------------------------
  -- setMiddle(Name) sets Name.myMiddle        -
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: theName.myMiddle.                  -
  ----------------------------------------------

  procedure setMiddle (TheName: out Name; Middle : in String) is
  begin
    TheName.myMiddle := Middle;
  end setMiddle;

    ----------------------------------------------
  -- setLast(Name) sets Name.myLast        -
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: theName.myLast.                  -
  ----------------------------------------------

  procedure setLast (TheName: out Name; Last : in String) is
  begin
    TheName.myLast := Last;
  end setLast;

  -----------------------------------------------
  -- lfmi(Name) returns a full Name as L-F-M[0] order  -
  -- Receive: theName, a Name.                  -
  -- PRE: theName has been initialized.         -
  -- Return: a String representation of L-F-M[0] -
  -----------------------------------------------

  function lfmi (TheName : in Name) return String is
  begin
    return TheName.myLast & ", " & TheName.myFirst & " " & TheName.myMiddle(TheName.myMiddle'First) & ".";
  end lfmi;

  ----------------------------------------------
  -- Put(Name) displays a Name value.          -
  -- PRE: theName has been initialized.        -
  -- Receive: theName, a Name.                 -
  -- Output: theName, to the screen.           -
  ----------------------------------------------

  -- replace this line with the definition of Put()
  procedure Put (TheName : in Name) is
  begin
    Put (getFullName(aName));
  end Put;

  ----------------------------------------------
  -- read(Name) sets a Name variable with user inputs          -
  -- Receive: theName, the Name variable;      -
  -- Return: theName, its fields set to First, -
  --               Middle, and Last.           -
  ----------------------------------------------

  procedure read (TheName : in out Name) is
  First, Middle, Last : String(1..10);
  begin
    Put("Enter the first name...");
    get(First);     
    TheName.myFirst := First;
    Put("Enter the middle name...");
    get(Middle);
    TheName.myMiddle := Middle;
    Put("Enter the last name...");
    get(Last);          
    TheName.myLast := Last; 
  end read;

begin
   Init(aName, "John      ", "Paul      ", "Jones     ");

   pragma Assert( getFirst(aName) = "John      ", "getFirst() failed");
   pragma Assert( getMiddle(aName) = "Paul      ", "getMiddle() failed");
   pragma Assert( getLast(aName) = "Jones     ", "getLast() failed");
   pragma Assert( getFullName(aName) = "John       Paul       Jones     ", 
                    "getFullName() failed");

   Put(aName); New_line;
  -- test for the result of project 7
   setFirst(aName, "Dwight    ");
   pragma Assert( getFirst(aName) = "Dwight    ", "getFirst() failed");  
   setMiddle(aName, "David     ");
   pragma Assert( getMiddle(aName) = "David     ", "getMiddle() failed");   
   setLast(aName, "Eisenhower");
   pragma Assert( getLast(aName) = "Eisenhower", "getLast() failed");
   pragma Assert( getFullName(aName) = "Dwight     David      Eisenhower", 
                    "getFullName() failed");
   pragma Assert( lfmi(aName) = "Eisenhower, Dwight     D.", 
                    "lfmi() failed");
   Put(aName); New_line;
   Put(lfmi(aName)); New_line;
   --  type "first     " as the first name, "middle    " as the middle name, and "last      " as the last name for the test.  
   read(aName);
   pragma Assert( getFirst(aName) = "first     ", "getFirst() failed");
   pragma Assert( getMiddle(aName) = "middle    ", "getMiddle() failed");
   pragma Assert( getLast(aName) = "last      ", "getLast() failed");
   pragma Assert( getFullName(aName) = "first      middle     last      ", 
                    "getFullName() failed");
   Put(aName); New_line;
   Put(lfmi(aName)); New_line;   
   Put("All tests passed!"); New_line;

end name_tester;

]0;chan@chan:~/Sources/school/214/projects/07[chan@chan 07]$ ./name_tester 
John       Paul       Jones     
Dwight     David      Eisenhower
Eisenhower, Dwight     D.
Enter the first name..." first     
Enter the middle name...middle    
Enter the last name...last      
first      middle     last      
last      , first      m.
All tests passed!
]0;chan@chan:~/Sources/school/214/projects/07[chan@chan 07]$ exit
exit

Script done on 2018-04-03 04:17:41-0400
;;; nameTester.el simulates and tests an e-LISP Name type.
;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;; Completed by: Chan Kim (ck45)
;;; Date: 4/3/2018

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Name constructs a name from three strings.      ;;
;;; Receive: first, middle and last, three strings. ;;
;;; Return: the triplet (first middle last).        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun Name (first middle last)
  (list first middle last))
Name

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFirst extracts the first name of a name object.;
;;; Receive: theName, a Name.                       
;;; Return: the first string in theName.           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun getFirst (theName)
  (car theName))
getFirst

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getMiddle extracts the middle name of a name object.
;;; Receive: theName, a Name.                      
;;; Return: the second string in theName.           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun getMiddle (theName)
  (car (cdr theName)))
getMiddle

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getLast extracts the last name of a name object.
;;; Receive: theName, a Name.                    
;;; Return: the third string in theName.       
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun getLast (theName)
  (car (cdr (cdr theName))))
getLast

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFullName returns a full name in F-M-L order. 
;;; Return: myFirst, myMiddle, myLast.           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun getFullName (aName)
  (concat (getFirst aName) " " (getMiddle aName) " " (getLast aName)))
getFullName

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; printName displays a name object.         
;;; Receive: theName, a Name,                 
;;;          buffer, the name of a buffer.   
;;; Output: the strings in theName to buffer. ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun printName (aName buf)
  (princ aName buf))
printName

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setFirst sets the first name of a name object.;
;;; Receive: theName, a Name,
;;;          first, a String.                       
;;; Return: the new triplet (first middle last) 
;;;         with the new first name.           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun setFirst (theName first)
  (setq aName (Name first (getMiddle theName) (getLast theName))))
setFirst

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setMiddle sets the middle name of a name object.;
;;; Receive: theName, a Name,
;;;          middle, a String.                       
;;; Return: the new triplet (first middle last) 
;;;         with the new middle name.             
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun setMiddle (theName middle)
  (setq aName (Name (getFirst theName) middle (getLast theName))))
setMiddle

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setFirst sets the last name of a name object.;
;;; Receive: theName, a Name,
;;;          last, a String.                       
;;; Return: the new triplet (first middle last) 
;;;         with the new last name.           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun setLast (theName last)
  (setq aName (Name (getFirst theName) (getMiddle theName) last)))
setLast

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; lfmi returns a full name in L-F-M(the first letter) order. 
;;; Return: myLast, myFirst, myMiddle[0].           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun lfmi (theName)
  (concat (getLast theName) ", " (getFirst theName) " " (substring (getMiddle theName) 0 1) "."))
lfmi

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; readName constructs(or reconstructs)            ;;
;;;          a name from user inputs.               ;;
;;; Receive: first, middle and last, three strings. ;;
;;; Return: the triplet (first middle last).        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun readName ()
  (princ "Enter the first name...\n")
  (setq first (read))
  (princ first) (terpri)
  (princ "Enter the middle name...\n")
  (setq middle (read))
  (princ middle) (terpri)
  (princ "Enter the last name...\n")
  (setq last (read))
  (princ last) (terpri)
  (setq aName (Name first middle last)))
readName

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A simple driver for our Name functions. ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(progn
  (require 'cl)                              ; assert
  (setq aName (Name "John" "Paul" "Jones"))  ; build a Name

  (assert (equal (getFirst aName) "John" ))  ; test it
  (assert (equal (getMiddle aName) "Paul" ))
  (assert (equal (getLast aName) "Jones" ))
  (assert (equal (getFullName aName) "John Paul Jones" ))

  (setq buf (get-buffer "nameTester.el"))    ; buf = this buffer
  (assert (eq (printName aName buf) aName) ) ; output
  (terpri buf)                               ; newline
  ; test for the result of the project 7.
  (setFirst aName "Dwight")
  (assert (equal (getFirst aName) "Dwight" ))
  (assert (equal (getMiddle aName) "Paul" ))
  (assert (equal (getLast aName) "Jones" ))
  (setMiddle aName "David")
  (assert (equal (getMiddle aName) "David" ))
  (assert (equal (getLast aName) "Jones" ))
  (assert (equal (getFirst aName) "Dwight" ))
  (setLast aName "Eisenhower")
  (assert (equal (getLast aName) "Eisenhower" ))
  (assert (equal (getFirst aName) "Dwight" ))
  (assert (equal (getMiddle aName) "David" ))
  (assert (equal (lfmi aName) "Eisenhower, Dwight D."))
  (printName (lfmi aName) buf)
  (terpri buf)
  ; type "first" as the first name, "middle" as the middle name, and "last" as the last name for the test.
  (readName)                                 
  (printName aName buf)
  (terpri buf)
  (assert (equal (getFirst aName) "first" ))
  (assert (equal (getMiddle aName) "middle" ))
  (assert (equal (getLast aName) "last" ))
  (princ "All tests passed!" buf)            ; feedback
  (terpri buf))                              ; newline
(John Paul Jones)
Eisenhower, Dwight D.
Enter the first name...
first
Enter the middle name...
middle
Enter the last name...
last
(first middle last)
All tests passed!
t
Script started on Tue 03 Apr 2018 04:28:19 AM EDT
ck45@cs-ssh:~/school/214/projects/07$ cat NameTester.rb
# NameTester.rb tests class Name and its operations
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Chan Kim (ck45)
# Date: 3/29/2018
####################################################

require 'test/unit/assertions'   # needed for assert
include Test::Unit::Assertions

# Replace this line with the declaration of class Name
class Name
    def initialize(first, middle, last)
        @first, @middle, @last = first, middle, last
    end

    attr_accessor :first, :middle, :last

    def fullName
        first + " " + middle + " " + last
    end

    def print
        puts fullName
        return fullName
    end

    #setFirst sets the first name of a name object.;
    #Receive: aFirst, a String.                       
    #Return: the new first name.    
    def setFirst(first)
        @first = first
    end

    #setMiddle sets the middle name of a name object.;
    #Receive: aMiddle, a String.                       
    #Return: the new middle name.     
    def setMiddle(middle)
        @middle = middle
    end

    #setLast sets the last name of a name object.;
    #Receive: aLast, a String.                       
    #Return: the new last name.      
    def setLast(last)
        @last = last
    end

    #lfmi returns a full name in L-F-M(the first letter) order. 
    #Return: myLast, myFirst, myMiddle[0]. 
    def lfmi
        last + ", " + first + " " + middle[0] + "."
    end

    #readName constructs(or reconstructs)            
    #a name from user inputs.               
    #Receive: first, middle and last, three strings. 
    #Return: the triplet (first middle last). 
    def read
        puts "Enter the first name...\n"
        @first = gets.chomp
        puts "Enter the middle name...\n"        
        @middle = gets.chomp
        puts "Enter the last name...\n"        
        @last = gets.chomp
    end

end

def testName
   name = Name.new("John", "Paul", "Jones")
   assert name.first == "John", "first failed"
   assert name.middle == "Paul", "middle failed"
   assert name.last == "Jones", "last failed"
   assert name.fullName == "John Paul Jones", "fullName failed"
   assert name.print == "John Paul Jones", "print failed"
    # test for the result of project 7
    name.setFirst("Dwight")
   assert name.first == "Dwight", "first failed" 
   assert name.fullName == "Dwight Paul Jones", "fullName failed"
    name.setMiddle("David")
   assert name.middle == "David", "middle failed"
   assert name.fullName == "Dwight David Jones", "fullName failed"
    name.setLast("Eisenhower")
   assert name.last == "Eisenhower", "last failed"
   assert name.fullName == "Dwight David Eisenhower", "fullName failed"
   assert name.lfmi == "Eisenhower, Dwight D.", "lfmi failed"    
    print name.lfmi + "\n"
    #  type "first" as the first name, "middle" as the middle name, and "last" as the last name for the test.
    name.read
   assert name.first == "first", "first failed"
   assert name.middle == "middle", "middle failed"
   assert name.last == "last", "last failed"
   assert name.fullName == "first middle last", "fullName failed"
   assert name.print == "first middle last", "print failed"
   print "All tests passed!\n"
end

testName

ck45@cs-ssh:~/school/214/projects/07$ ruby      s ls
Makefile    name_tester      name_tester.ali   nameTester.el   NameTester.java	NameTester.rb  script.elisp  script.ruby
Name.class  name_tester.adb  NameTester.class  nameTester.el~  name_tester.o	script.ada     script.java
ck45@cs-ssh:~/school/214/projects/07$ ruby NameTester.rb
John Paul Jones
Eisenhower, Dwight D.
Enter the first name...
first
Enter the middle name...
middle
Enter the last name...
last
first middle last
All tests passed!
ck45@cs-ssh:~/school/214/projects/07$ exit
exit

Script done on Tue 03 Apr 2018 04:28:47 AM EDT
