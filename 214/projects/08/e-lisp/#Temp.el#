;;; Temp.el simulates an e-LISP Temp type and operations on that type.
;;;
;;; Prof: Dr. Adams, for CS 214 at Calvin College.
;;; Student: Chan Kim (ck45)
;;; Date: 4/9/2018
;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Temp constructs a Temp from two values.         ;;
;;; Receive: degrees, float; scale, char            ;;
;;; Return: set to degrees, and scale.              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun Temp(degrees scale)
  (list degrees scale) )
Temp


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; isValid(degrees, scale) checks the validation.        
;;; Receive: degrees, float; scale, a character.                      
;;; PRE: degrees and scale have been initialized.            
;;; Return: t or nil.   
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun isValid(degrees scale)
  (if (and (>= degrees -459.6) (char-equal scale ?F))
      (setq return t)
    (if (and (>= degrees -273.15) (char-equal scale ?C))
	(setq return t)
      (if (and (>= degrees 0.0) (char-equal scale ?K))
	  (setq return t)
	(setq return nil))))
  return)
isValid



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getDegrees extracts the degrees of a Temp object.;
;;; Receive: theTemp, a Temp.                       
;;; Return: the degrees in theTemp.           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun getDegrees(theTemp)
  (car theTemp) )
getDegrees


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getDegrees extracts the scale of a Temp object.;
;;; Receive: theTemp, a Temp.                       
;;; Return: the scale in theTemp.             
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun getScale(theTemp)
  (car (cdr theTemp) ) )
getScale


(defun setDegrees(theTemp degrees)
  (setcar theTemp degrees)
theTemp)
setDegrees


(defun setScale(theTemp scale)
  (setf (car (cdr theTemp)) scale)
theTemp)
setScale


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setFahrenheit(theTemp), setCelsius(theTemp), setKelvin(theTemp)              
;;; Receive: theTemp, a Temp.                     
;;; PRE: theTemp has been initialized.             
;;; Return: sets to those scales
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun setFahrenheit(theTemp)
  (if (char-equal (getScale theTemp) ?C)
    (progn (setScale theTemp ?F)
      (setDegrees theTemp (+ 32.0 (* 1.8 (getDegrees theTemp)))))
  (if (char-equal (getScale theTemp) ?K)
    (progn (setScale theTemp ?F)
      (setDegrees theTemp (- (* 1.8 (getDegrees theTemp)) 459.67))
      )))        
theTemp)

(defun setCelsius(theTemp)
  (if (char-equal (getScale theTemp) ?F)
    (progn (setScale theTemp ?C)
      (setDegrees theTemp (/ (- (getDegrees theTemp) 32.0) 1.8)))
  (if (char-equal (getScale theTemp) ?K)
    (progn (setScale theTemp ?C)
      (setDegrees theTemp (- (getDegrees theTemp) 273.15)))
  ))        
theTemp)
setCelsius


(defun setKelvin(theTemp)
  (if (char-equal (getScale theTemp) ?C)
    (progn (setScale theTemp ?K)
      (setDegrees theTemp (+ 273.15 (getDegrees theTemp))))
  (if (char-equal (getScale theTemp) ?F)
    (progn (setScale theTemp ?K)
      (setDegrees theTemp (/ (+ 459.67 (getDegrees theTemp)) 1.8)))
  ))        
theTemp)

(defun readTemp(theTemp)
  (setq newDegrees 0.0)
  (setq newScale ?C)
  (setq values (upcase (read-from-minibuffer "Enter a temperature with its scale: ")))
  (setq newDegrees (string-to-number values))
  (setq newScale (string-to-char (byte-to-string (aref values (- (length values) 1)))))
  (if (isValid newDegrees newScale)
    (progn (setDegrees theTemp newDegrees)
      (setScale theTemp newScale))
    (princ "Invalid value"))
theTemp)

(defun raise(theTemp degrees)
  (setDegrees theTemp (+ (getDegrees theTemp) degrees))
)

(defun lower(theTemp degrees)
  (if (isValid (- (getDegrees theTemp) degrees) (getScale theTemp))
    (setDegrees theTemp (- (getDegrees theTemp) degrees)))
theTemp)

(defun equals(baseTemp limitTemp)
  (let ((copyBase (copy-sequence baseTemp))
    (copyLimit (copy-sequence limitTemp)))
    (setCelsius copyBase)
    (setCelsius copyLimit)
    (= (getDegrees copyBase) (getDegrees copyLimit)))
)

(defun lessThan(baseTemp limitTemp)
  (let ((copyBase (copy-sequence baseTemp))
    (copyLimit (copy-sequence limitTemp)))
    (setCelsius copyBase)
    (setCelsius copyLimit)
    (< (getDegrees copyBase) (getDegrees copyLimit)))
  )
(setq base (Temp 32.0 ?F))
(32.0 70)

(0.0 70)
(setq lim (Temp 0.0 ?C))
(0.0 67)

(10.0 67)

(lessThan base lim)
nil

t



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFullTemp returns a full Temp in F-M-L order. 
;;; Return: myFirst, myMiddle, myLast.           
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun getFullTemp (theTemp)
   (concat (format "%7.2f" (getDegrees theTemp)) " " (char-to-string (getScale theTemp))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; printTemp displays a Temp object.         
;;; Receive: theTemp, a Temp,                 
;;;          buffer, the Temp of a buffer.   
;;; Output: the strings in theTemp to buffer. ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun printTemp (theTemp buf)
  (let ((setq copyTemp (copy-sequence theTemp)))
   (princ (getFullTemp (setFahrenheit theTemp)) buf)
   (princ "\t" buf)
   (princ (getFullTemp (setCelsius theTemp)) buf)
   (princ "\t" buf)
   (princ (getFullTemp (setKelvin theTemp)) buf)
   (princ "\t" buf)      
   theTemp ))

(defun printLoop (baseTemp limitTemp stepValue buf)
  (if (lessThan baseTemp limitTemp)
  (progn (printTemp baseTemp buf)
    (raise baseTemp stepValue)
    (printLoop baseTemp limitTemp stepValue buf)))
)