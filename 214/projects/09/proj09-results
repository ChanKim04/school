Script started on 2018-04-16 11:50:27-0400
]0;chan@chan:~/Sources/school/214/projects/09/java[chan@chan java]$ cat Max.java 
/* Max.java finds the maximum values in Java linked lists.
 *
 * Begun by: Dr. Adams, CS 214 at Calvin College.
 * Completed by: Chan Kim (ck45)
 * Date: 4/16/2018
 */

import java.util.LinkedList;
import java.util.Iterator;
import java.util.Collections;

public class Max {

  public static void main(String [] args) {
    // define list1, list2, list3, list4 here ...
    LinkedList<Integer> list1 = new LinkedList<Integer>();
    LinkedList<Integer> list2 = new LinkedList<Integer>();
    LinkedList<Integer> list3 = new LinkedList<Integer>();
    LinkedList<Integer> list4 = new LinkedList<Integer>();

    list1.add(99);    // 99, 88, 77, 66, 55
    list1.add(88);    // max is first
    list1.add(77);
    list1.add(66);  
    list1.add(55);

    list2.add(55);    // 55, 66, 77, 88, 99
    list2.add(66);    // max is last
    list2.add(77);  
    list2.add(88);  
    list2.add(99);  
  
    list3.add(55);    // 55, 77, 99, 88, 66
    list3.add(77);    // max is in the middle
    list3.add(99);  
    list3.add(88);  
    list3.add(66);  

    list4.add(44);    // 44, 55, 66, 77, 88
    list4.add(55);    // max is last
    list4.add(66);
    list4.add(77);  
    list4.add(88);

    print(list1); 
    print(list2); 
    print(list3);
    print(list4);

   // display maxima of the 4 lists...
   System.out.println("Max of list1: " + Collections.max(list1));
   System.out.println("Max of list2: " + Collections.max(list2));
   System.out.println("Max of list3: " + Collections.max(list3));
   System.out.println("Max of list4: " + Collections.max(list4));
  

   System.out.println("The position of 99 within list1: " + search(list1, 99));
   System.out.println("The position of 99 within list2: " + search(list2, 99));
   System.out.println("The position of 99 within list3: " + search(list3, 99));
   System.out.println("The position of 99 within list4: " + search(list4, 99));
   
  }

  /** print() displays a LinkedList on the console.
   *
   * @param: aList, a LinkedList<Integer>
   * 
   * Postcondition: the Integer values in aList
   *                 have been displayed to System.out,
   *                 separated by spaces.
   */
  // replace this line with the definition of print().
  public static void print(LinkedList<Integer> aList)
  {
    Iterator<Integer> listIterator = aList.iterator();
    while (listIterator.hasNext()){
      System.out.print(listIterator.next() + " ");
    }
    System.out.print('\n');
  }

  /*
   * Receive: aList, a list of integers; and
   *         aValue, an integer.
   * Return: the position of aValue within aList, if aValue is present in aList;
   *        -1, otherwise.
   */

  public static Integer search(LinkedList<Integer> aList, Integer aValue)
  {
    Iterator<Integer> listIterator = aList.iterator();
    Integer count = 0;
    while (listIterator.hasNext())
    {
      if (listIterator.next() == aValue)
      {
        return count;
      }
      else
      {
        count++;
      }
    } 
    return -1;
  }
}

]0;chan@chan:~/Sources/school/214/projects/09/java[chan@chan java]$ make
javac -deprecation Max.java
]0;chan@chan:~/Sources/school/214/projects/09/java[chan@chan java]$ ls
Makefile  Max.class  Max.java  script.java
]0;chan@chan:~/Sources/school/214/projects/09/java[chan@chan java]$ java Max 
99 88 77 66 55 
55 66 77 88 99 
55 77 99 88 66 
44 55 66 77 88 
Max of list1: 99
Max of list2: 99
Max of list3: 99
Max of list4: 88
The position of 99 within list1: 0
The position of 99 within list2: 4
The position of 99 within list3: 2
The position of 99 within list4: -1
]0;chan@chan:~/Sources/school/214/projects/09/java[chan@chan java]$ exit
exit

Script done on 2018-04-16 11:50:56-0400
Script started on 2018-04-16 11:51:08-0400
]0;chan@chan:~/Sources/school/214/projects/09/ada[chan@chan ada]$ ls
[0m[01;32madaMax[0m  list_package.adb  list_package.ads  list_package.ali  list_package.o  Makefile  max.adb  max.ali  max.o  script.ada
]0;chan@chan:~/Sources/school/214/projects/09/ada[chan@chan ada]$ cat list_package.ads
-- list_package.ads declares an Ada linked list and its operations.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Chan Kim (ck45)
-- Date: 4/16/2018
------------------------------------------------------------------

package List_Package is

  -- the list-type itself (public)
  type List is private;

  -----------------------------------------------------
  -- Initialize a list                                -
  -- Receive: aList, a List.                          -
  -- Pre: aList is uninitialized.                     -
  -- Post: aList%itsFirst == aList%itsLast == NULL && -
  --        aList%itsLength == 0.                     -
  -----------------------------------------------------
  procedure Init(A_List: out List);


  ------------------------------------------------
  -- Is a list empty?                            -
  -- Receive: aList, a List.                     -
  -- Return: true, iff aList contains no values. -
  ------------------------------------------------
  function Empty(A_List: in List) return Boolean;

  -------------------------------------
  -- How many values are in a list?   -
  -- Receive: aList, a List.          -
  -- Return: aList%itsLength.         -
  -------------------------------------
  function Length(A_List : in List) return Integer;


  ----------------------------------------
  -- Append a value to a list.           -
  -- Receive: aValue, an integer,        -
  -- Passback: aList, containing aValue. -
  ----------------------------------------
  procedure Append(A_Value : in Integer; A_List: in out List);


  -------------------------------------
  -- Display the values in a list.    -
  -- Receive: aList, a List.          -
  -- Output: the values in aList.     -
  -------------------------------------
  procedure Put(A_List : in List);
  ---------------------------------------
  -- Find the maximum value in a list.  -
  -- Receive: aList, a List.            -
  -- Return: the maximum value in aList.-
  ---------------------------------------
  function Max(A_List : List) return Integer;

  ---------------------------------------
  -- Receive: aList, a list of integers; and
  --          aValue, an integer.
  -- Return: the position of aValue within aList, if aValue is present in aList;
  --         -1, otherwise.
  ---------------------------------------
  function search(A_List : List; A_Value : Integer) return Integer;

 private
  type List_Node;
  type Node_Ptr is access List_Node;
  type List_Node is 
    record
      Its_Value : Integer;
      Its_Next : Node_Ptr;
    end record;
  type List is
    record
      Its_First : Node_Ptr;
      Its_Last : Node_Ptr;
      Its_Length : Integer;
    end record;

end List_Package;

]0;chan@chan:~/Sources/school/214/projects/09/ada[chan@chan ada]$ cat list_package.adb
-- list_package.adb defines Ada linked list operations.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Chan Kim (ck45)
-- Date: 4/16/2018
-------------------------------------------------------

with Ada.Text_IO, Ada.Integer_Text_IO;
use Ada.Text_IO, Ada.Integer_Text_IO;

package body List_Package is

  -----------------------------------------------------
  -- Initialize a list                                -
  -- Receive: aList, a List.                          -
  -- Pre: aList is uninitialized.                     -
  -- Post: aList%itsFirst == aList%itsLast == NULL && -
  --        aList%itsLength == 0.                     -
  -----------------------------------------------------
  procedure Init(A_List : out List) is
  begin
    A_List.Its_First := null;
    A_List.Its_Last := null;
    A_List.Its_Length := 0;
  end Init;

  ------------------------------------------------
  -- Is a list empty?                            -
  -- Receive: aList, a List.                     -
  -- Return: true, iff aList contains no values. -
  ------------------------------------------------
  function Empty(A_List : in List) return Boolean is
  begin
    return A_List.Its_Length = 0;
  end Empty;

  -------------------------------------
  -- How many values are in a list?   -
  -- Receive: aList, a List.          -
  -- Return: aList%itsLength.         -
  -------------------------------------
  function Length(A_List : in List) return Integer is
  begin
    return A_List.Its_Length;
  end Length;

  ----------------------------------------
  -- Append a value to a list.           -
  -- Receive: aValue, an integer,        -
  -- Passback: aList, containing aValue. -
  ----------------------------------------
  procedure Append(A_Value : in Integer; A_List : in out List) is
    Temp_Ptr : constant Node_Ptr := new List_Node;
  begin
    Temp_Ptr.Its_Value := A_Value;
    Temp_Ptr.Its_Next := null;

    if A_List.Its_Length = 0 then
       A_List.Its_First := Temp_Ptr;
    else
       A_List.Its_Last.Its_Next := Temp_Ptr;
    end if;

    A_List.Its_Last := Temp_Ptr;

    A_List.Its_Length := A_List.Its_Length + 1;
  end Append;

  -------------------------------------
  -- Display the values in a list.    -
  -- Receive: aList, a List.          -
  -- Output: the values in aList.     -
  -------------------------------------

  -- replace this line with the definition of Put()
  procedure Put(A_List : in List) is
    Temp_Ptr : Node_Ptr := A_List.Its_First;
  begin
    while Temp_Ptr /= null loop
      Put(' '); Put(Temp_Ptr.Its_Value);
      Temp_Ptr := Temp_Ptr.Its_Next;
    end loop;
  end Put;
  ---------------------------------------
  -- Find the maximum value in a list.  -
  -- Receive: aList, a List.            -
  -- Return: the maximum value in aList.-
  ---------------------------------------

  -- replace this line with the definition of Max()
  function Max(A_List : List) return Integer is
    Temp_Ptr : Node_Ptr := A_List.Its_First;
    Max_Value : Integer := -999999;
  begin
    while Temp_Ptr /= null loop
      if Temp_Ptr.Its_Value > Max_Value then
        Max_Value := Temp_Ptr.Its_Value;
      end if;
      Temp_Ptr := Temp_Ptr.Its_Next;
    end loop;
    return Max_Value;
  end Max;
  ---------------------------------------
  -- Receive: aList, a list of integers; and
  --          aValue, an integer.
  -- Return: the position of aValue within aList, if aValue is present in aList;
  --         -1, otherwise.
  ---------------------------------------

  function search(A_List : List; A_Value : Integer) return Integer is
    Temp_Ptr : Node_Ptr := A_List.Its_First;
    count : Integer := 0;
  begin
    while Temp_Ptr /= null loop
      if Temp_Ptr.Its_Value = A_Value then
        return count;
      end if;
      Temp_Ptr := Temp_Ptr.Its_Next;
      count := count + 1;
    end loop;
    return -1;
  end search;

end List_Package;

]0;chan@chan:~/Sources/school/214/projects/09/ada[chan@chan ada]$ ls
[0m[01;32madaMax[0m  list_package.adb  list_package.ads  list_package.ali  list_package.o  Makefile  max.adb  max.ali  max.o  script.ada
]0;chan@chan:~/Sources/school/214/projects/09/ada[chan@chan ada]$ cat max.d[Kadb 
-- max.adb finds the max of a list of integers. 
-- 
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Chan Kim (ck45)
-- Date: 4/16/2018
-------------------------------------------------- 
 
with Ada.Text_IO, Ada.Integer_Text_IO, List_Package; 
use Ada.Text_IO, Ada.Integer_Text_IO, List_Package; 
 
procedure Max is 
                              -- define 4 lists 
  List1, List2, List3, List4 : List; 
 
begin 
  Init(List1);                -- initialize them 
  Init(List2); 
  Init(List3); 
  Init(List4);
 
  Append(99, List1);          -- 99, 88, 77, 66, 55 
  Append(88, List1);          -- max is first 
  Append(77, List1); 
  Append(66, List1); 
  Append(55, List1); 
 
  Append(55, List2);          -- 55, 66, 77, 88, 99 
  Append(66, List2);          -- max is last 
  Append(77, List2); 
  Append(88, List2); 
  Append(99, List2); 
 
  Append(55, List3);          -- 55, 77, 99, 88, 66 
  Append(77, List3);          -- max is in the middle 
  Append(99, List3); 
  Append(88, List3); 
  Append(66, List3); 

  Append(44, List4);          -- 44, 55, 66, 77, 88
  Append(55, List4);          -- max is last  
  Append(66, List4);          
  Append(77, List4); 
  Append(88, List4);

  Put(List1); New_Line;       -- output the 4 lists 
  Put(List2); New_Line; 
  Put(list3); New_Line; 
  Put(list4); New_Line; 
                              -- display their maxima 
  Put("The maximum value in list 1 is ");  
  Put( Max(List1) ); 
  New_Line; 
  Put("The maximum value in list 2 is "); 
  Put( Max(List2) );
  New_Line; 
  Put("The maximum value in list 3 is ");
  Put( Max(List3) );
  New_Line; 
  Put("The maximum value in list 4 is ");
  Put( Max(List4) );
  New_Line;   

   Put("The position of 99 within list1: ");  
  Put( search(List1, 99) ); 
  New_Line; 
  Put("The position of 99 within list2: "); 
  Put( search(List2, 99) );
  New_Line; 
  Put("The position of 99 within list3: ");
  Put( search(List3, 99) );
  New_Line; 
  Put("The position of 99 within list4: ");
  Put( search(List4, 99) );
  New_Line;  
 
end Max; 

]0;chan@chan:~/Sources/school/214/projects/09/ada[chan@chan ada]$ ls
[0m[01;32madaMax[0m  list_package.adb  list_package.ads  list_package.ali  list_package.o  Makefile  max.adb  max.ali  max.o  script.ada
]0;chan@chan:~/Sources/school/214/projects/09/ada[chan@chan ada]$ make
gcc -c -Wall max.adb
gcc -c -Wall list_package.adb
gnatbind  max.ali
gnatlink  max.ali -o adaMax
]0;chan@chan:~/Sources/school/214/projects/09/ada[chan@chan ada]$ ./adaMax 
          99          88          77          66          55
          55          66          77          88          99
          55          77          99          88          66
          44          55          66          77          88
The maximum value in list 1 is          99
The maximum value in list 2 is          99
The maximum value in list 3 is          99
The maximum value in list 4 is          88
The position of 99 within list1:           0
The position of 99 within list2:           4
The position of 99 within list3:           2
The position of 99 within list4:          -1
]0;chan@chan:~/Sources/school/214/projects/09/ada[chan@chan ada]$ exit
exit

Script done on 2018-04-16 11:52:27-0400
;;; mylist.el is a "module" of list operations.
;;;
;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;; Completed by: Chan Kim (ck45)
;;; Date: 4/16/2018

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Max2 finds the maximum of two values.       ;;
;;; Receive: val1, val2, two values.            ;;
;;; PRE: val1 and val2 can be compared using <. ;;
;;; Return: the maximum of val1 and val2.       ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun Max2 (val1 val2)
  (if (> val1 val2)
      val1
    val2))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Max finds the maximum value in a list.         ;;
;;; Receive: aList, a list of values.              ;;
;;; PRE: values in aList can be compared using <.  ;;
;;; Return: the maximum value in aList.            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun Max (aList)
  (if (listp aList)
      (progn
        (if (equal (length aList) 0) nil
	(if (equal (length aList) 1)
	  (car aList)
	(Max2 (car aList) (Max (cdr aList))))))
    nil))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Search2 finds the aValue in a list.         ;;
;;; Receive: aList, a list of integers;         ;;
;;;   aValue, an integer; and count, an integer.;;
;;; Return: the position of aValue within aList,;; 
;;;if aValue is present in aList; -1, otherwise.;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun Search2 (aList aValue count)
  (if (equal (car aList) aValue) count
  (if (equal (length aList) 0) -1
    (Search2 (cdr aList) aValue (+ count 1)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Search finds the aValue in a list.             ;;
;;; Receive: aList, a list of integers;            ;;
;;;           and aValue, an integer.              ;;
;;; Return: the position of aValue within aList,   ;; 
;;;   if aValue is present in aList; -1, otherwise.;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun Search (aList aValue)
  (if (listp aList)
    (progn
      (if (equal (length aList) 0) -1
      (Search2 aList aValue 0)))
    nil));;; max.el searches a list for its maximum value.
;;;
;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;; Completed by: Chan Kim (ck45)
;;; Date: 4/16/2018

(setq load-path (list "."))              ; setup load-path to WD
(".")


(load "mylist.elc")                      ; load module
t


;;;;;;;;;;;;;;;;;;;;;;;;;
;;; test function Max. ;;
;;;;;;;;;;;;;;;;;;;;;;;;;
(progn
  (let
      ((buf (get-buffer "max.el"))       ; setup for output
       (list1 (list 99 88 77 66 55))     ; max is first
       (list2 (list 55 66 77 88 99))     ; max is last
       (list3 (list 55 77 99 88 66))     ; max in middle
       (list4 (list 44 55 66 77 88)))    ; max is last

    (princ list1 buf)                    ; print list1
    (terpri buf)                         ;  and a newline

    (princ list2 buf)                    ; print list2
    (terpri buf)                         ;  and a newline

    (princ list3 buf)                    ; print list3
    (terpri buf)                         ;  and a newline

    (princ list4 buf)                    ; print list4
    (terpri buf)                         ;  and a newline

    (princ "The max in list 1 is " buf)  ; print the max
    (princ (Max list1) buf)              ;  in list1
    (terpri buf)                         ;  and a newline
    (princ "The max in list 2 is " buf)  ; print the max
    (princ (Max list2) buf)              ;  in list2
    (terpri buf)                         ;  and a newline
    (princ "The max in list 3 is " buf)  ; print the max
    (princ (Max list3) buf)              ;  in list3
    (terpri buf)                       ;  and a newline
    (princ "The max in list 4 is " buf)  ; print the max
    (princ (Max list4) buf)              ;  in list4
    (terpri buf)                       ;  and a newline

    (princ "The position of 99 within list1: " buf)  ; print the search 99
    (princ (Search list1 99) buf)              ;  in list1
    (terpri buf)                         ;  and a newline
    (princ "The position of 99 within list2: " buf)  ; print the search 99
    (princ (Search list2 99) buf)              ;  in list2
    (terpri buf)                         ;  and a newline
    (princ "The position of 99 within list3: " buf)  ; print the seacrh 99
    (princ (Search list3 99) buf)              ;  in list3
    (terpri buf)                       ;  and a newline
    (princ "The position of 99 within list4: " buf)  ; print the search 99
    (princ (Search list4 99) buf)              ;  in list4
    (terpri buf)))                       ;  and a newline
(99 88 77 66 55)
(55 66 77 88 99)
(55 77 99 88 66)
(44 55 66 77 88)
The max in list 1 is 99
The max in list 2 is 99
The max in list 3 is 99
The max in list 4 is 88
The position of 99 within list1: 0
The position of 99 within list2: 4
The position of 99 within list3: 2
The position of 99 within list4: -1
t
Script started on Mon 16 Apr 2018 12:00:03 PM EDT
ck45@cs-ssh:~/school/214/projects/09/ruby$ cat l List.rb 
# List.rb implements a linked list structure in Ruby.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Chan Kim (ck45)
# Date: 4/16/2018
#######################################################

require 'test/unit/assertions'
include Test::Unit::Assertions

class List

   # initialize a List to be empty
   # Postcondition: first == nil and last == nil and length == 0
    def initialize
        @first = nil
        @last = nil
        @length = 0
    end

   # create reader method for length
    attr_reader :length

   # Am I empty?
   # Return: length == 0
    def empty?
        @length == 0
    end
  
   # append a value to me
   # Receive: value, the item to be appended
   # Postcondition: my last item is value and
   #                 my length is one more than it was
   def append(value)
      newNode = Node.new(value, nil)

      if empty?
         @first = newNode
      else
         @last.next = newNode      
      end

      @last = newNode
      @length += 1
      self
   end


   # print my items
   # Postcondition: my items have been displayed to the screen
    def print
        temp = @first
        while !temp.nil?
            printf " #{temp.value}"
            temp = temp.next
        end
    end

   # find my maximum item
   # Return: my maximum item
    def max
        temp = @first
        maxValue = -999999
        while !temp.nil?
            if temp.value > maxValue
                maxValue = temp.value
            end
            temp = temp.next
        end
        return maxValue
    end

   # Receive: aValue, an integer.
   # Return: the position of aValue within aList, if aValue is present in aList;
   #        -1, otherwise.    
    def search(value)
        temp = @first
        count = 0
        while !temp.nil?
            if temp.value == value
                return count
            end
            temp = temp.next
            count += 1
        end
        return -1
    end


   # a declaration for class Node and its methods
   class Node
        def initialize(item, link)
            @value = item
            @next = link
        end
        attr_reader :value
        attr_accessor :next
    end

end

ck45@cs-ssh:~/school/214/projects/09/ruby$ cat max.rb 
# max.rb tests a Ruby linked list.
#
# Begun by: Dr. Adams for CS 214 at Calvin College.
# Completed by: Chan Kim (ck45)
# Date: 4/16/2018

require './List'

list1 = List.new
list2 = List.new
list3 = List.new
list4 = List.new

list1.append(99).append(88).append(77).append(66).append(55)
list2.append(55).append(66).append(77).append(88).append(99)
list3.append(55).append(77).append(99).append(88).append(66)
list4.append(44).append(55).append(66).append(77).append(88)

list1.print 
puts
puts "Maximum of list1: #{list1.max}"
puts
puts "The position of 99 within list1: #{list1.search(99)}"

list2.print 
puts
puts "Maximum of list2: #{list2.max}"
puts
puts "The position of 99 within list2: #{list2.search(99)}"

list3.print 
puts
puts "Maximum of list3: #{list3.max}"
puts
puts "The position of 99 within list3: #{list3.search(99)}"

list4.print 
puts
puts "Maximum of list4: #{list4.max}"
puts
puts "The position of 99 within list4: #{list4.search(99)}"

ck45@cs-ssh:~/school/214/projects/09/ruby$ ruby max.rb 
 99 88 77 66 55
Maximum of list1: 99

The position of 99 within list1: 0
 55 66 77 88 99
Maximum of list2: 99

The position of 99 within list2: 4
 55 77 99 88 66
Maximum of list3: 99

The position of 99 within list3: 2
 44 55 66 77 88
Maximum of list4: 88

The position of 99 within list4: -1
ck45@cs-ssh:~/school/214/projects/09/ruby$ exit
exit

Script done on Mon 16 Apr 2018 12:00:26 PM EDT
