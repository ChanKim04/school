Script started on 2018-04-20 05:06:36-0400
]0;chan@chan:~/Sources/school/214/labs/10/java[chan@chan java]$ javac -deprecation Birds.java 
]0;chan@chan:~/Sources/school/214/labs/10/java[chan@chan java]$ java Bi[K[K[K[K[K[K[Kls
Bird.class  Birds.class  Duck.class  Goose.class  Makefile   Owl.java
Bird.java   Birds.java   Duck.java   Goose.java   Owl.class  script.java
]0;chan@chan:~/Sources/school/214/labs/10/java[chan@chan java]$ cat Birds.java 
/* Birds.java illustrates inheritance and polymorphism.
 *
 * Begun by: Joel Adams, for CS 214 Lab 10 at Calvin College.
 * Completed by: Chan Kim (ck45)
 * Date: 4/20/2018
 *********************************************************/

public class Birds {
  
  public static void main(String[] args) {
      System.out.println("\nWelcome to the Bird Park!\n");

      Bird bird0 = new Bird();

      Bird bird1 = new Bird("Hawkeye");
      bird1.print();

      Duck bird2 = new Duck("Donald");
      bird2.print();

      Goose bird3 = new Goose("Mother Goose");
      bird3.print();

      Owl bird4 = new Owl("Woodsey");
      bird4.print();
      System.out.println();
    }
}
]0;chan@chan:~/Sources/school/214/labs/10/java[chan@chan java]$ cat Bird.java 
/* Bird.java provides a Bird class.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Chan Kim (ck45)
 * Date: 4/20/2018
 ******************************************************/

import java.io.*;

public class Bird
{
 /* default constructor
  * PostCond: myName == "".
  */
    public Bird()
    {
	    myName = "";
    }                                                                                                                                     
                                                                                                                                
 /* explicit constructor                                                                                                        
  * Receive: name, a String 
  * PostCond: myName == name.
  */
    public Bird(String name)
    {
	    myName = name;
    }

 /* Name accessor
  * Return: myName.
  */
    public String getName()
    {
	    return myName;
    } 

 /* A Bird's Call
  * Return: a default bird-call ("Squawk!").
  */
    public String call()
    {
	    return "Squaaaaaaaaaawk!";
    } 

 /* Output a Bird 
  * Output: Everything known about myself
  *          to the standard output stream.
  */
    public void print()
    {
	    System.out.println( getName() + ' ' + getClass().getName()
                             + " says " + call() );
    } 


  private String myName;
}
]0;chan@chan:~/Sources/school/214/labs/10/java[chan@chan java]$ cat Duck.java 
/* Duck.java provides a Duck subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Chan Kim (ck45)
 * Date: 4/20/2018
 ******************************************************/

public class Duck extends Bird{
    
 /* explicit constructor
  * Receive: name, a String 
  * PostCond: myName == name.
  */
   public Duck() {
      super();
   }

   public Duck(String name)
   {     
      super(name);
   } 


 /* A Duck's Call
  * Return: a duck-call ("Quack!").
  */
   public String call()
   {
     return "Quack!";
   } 
}
]0;chan@chan:~/Sources/school/214/labs/10/java[chan@chan java]$ cat Goose.java 
/* Goose.java provides a Goose subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Chan Kim (ck45)
 * Date: 4/20/2018
 ******************************************************/

public class Goose extends Bird{

 /* explicit constructor
  * Receive: name, a String 
  * PostCond: myName == name.
  */
   public Goose()
   {
      super();
   }

   public Goose(String name)
   {     
     super(name);
   } 


 /* A Goose's Call
  * Return: a goose-call ("Honk!").
  */

   public String call()
   {
     return "Honk!";
   } 
} 
]0;chan@chan:~/Sources/school/214/labs/10/java[chan@chan java]$ cat Owl.java 
/* Owl.java provides an Owl subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Chan Kim (ck45)
 * Date: 4/20/2018
 ******************************************************/

public class Owl extends Bird{

 /* explicit constructor
  * Receive: name, a String 
  * PostCond: myName == name.
  */
   public Owl()
   {
      super();
   }

   public Owl(String name)
   {     
     super(name);
   }


 /* An Owl's Call
  * Return: an owl-call ("Whoo-hoo!").
  */
   public String call()
   {
     return "Whoo-hoo!";
   } 
} ]0;chan@chan:~/Sources/school/214/labs/10/java[chan@chan java]$ java Birds 
Bird.class   Birds.class  Duck.class   Goose.class  Makefile     Owl.java     
Bird.java    Birds.java   Duck.java    Goose.java   Owl.class    script.java  
[chan@chan java]$ java Birds [K

Welcome to the Bird Park!

Hawkeye Bird says Squaaaaaaaaaawk!
Donald Duck says Quack!
Mother Goose Goose says Honk!
Woodsey Owl says Whoo-hoo!

]0;chan@chan:~/Sources/school/214/labs/10/java[chan@chan java]$ exit
exit

Script done on 2018-04-20 05:08:55-0400
Script started on 2018-04-20 05:09:21-0400
]0;chan@chan:~/Sources/school/214/labs/10/ada[chan@chan ada]$ gnatmake birds.adb 
gnatmake: "birds" up to date.
]0;chan@chan:~/Sources/school/214/labs/10/ada[chan@chan ada]$ [K[chan@chan ada]$ caa[K[K[Kcat birds
birds      birds.adb  birds.ali  birds.o    
[chan@chan ada]$ cat birds
birds      birds.adb  birds.ali  birds.o    
[chan@chan ada]$ cat birds.adb
-- birds.adb tests our Birds type hierarchy.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College
-- Completed by: Chan Kim (ck45)
-- Date: 4/20/2018
-----------------------------------------------------

with Bird_Package, 
      Duck_Package, 
      Goose_Package, 
      Owl_Package,
      Ada.Text_IO;
use Bird_Package,
      Duck_Package, 
      Goose_Package,
      Owl_Package,
      Ada.Text_IO;


procedure Birds is

 Bird1 : Bird_Type;       -- base class
 Bird2 : Duck_Type;       -- derived class 1
 Bird3 : Goose_Type;      -- derived class 2
 Bird4 : Owl_Type;        -- derived class 3

begin
   Put("\nWelcome to the Bird Park!\n");
 Init(Bird1, "Tweety");
 Put(Bird1); New_Line;

 Init(Bird2, "Donald");
 Put(Bird2); New_Line;

 Init(Bird3, "Mother");
 Put(Bird3); New_Line;

 Init(Bird4, "Woodsy");
 Put(Bird4); New_Line;

 New_Line;
end Birds;
]0;chan@chan:~/Sources/school/214/labs/10/ada[chan@chan ada]$ cat bird_package.ads
-- bird_package.ads gives Bird-related declarations
--
-- Begun by: Dr. Adams, for CS 214 at Calvin College.
-- Completed by: Chan Kim (ck45)
-- Date: 4/20/2018
---------------------------------------------------

package Bird_Package is

    type Bird_Type is tagged private;
 ----------------------------------------------------
 -- initialization                                  -
 -- Receive: A_Bird, a Bird_Type;                   -
 --          Name, a String                         -
 -- Return: a Bird_Type whose My_Name = Name.       -
 ----------------------------------------------------
    procedure Init(A_Bird : out Bird_Type; Name : in String);
 ----------------------------------------------------
 -- Name accessor                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: A_Bird.My_Name.                         -
 ----------------------------------------------------
    function  Name(A_Bird : in Bird_Type) return String;
 ----------------------------------------------------
 -- A Bird's Call                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: a default bird-call ("Squawk!").        -
 ----------------------------------------------------
    function  Call(A_Bird : in Bird_Type) return String;
 ----------------------------------------------------
 -- Determine type of a Bird (for derived types)    -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: "Bird".                                 -
 ----------------------------------------------------
    function  Type_Name(A_Bird : in Bird_Type) return String;
 ----------------------------------------------------
 -- Output a Bird                                   -
 -- Receive: A_Bird, a Bird or subclass of Bird.    -
 -- Output: Everything known about A_Bird           -
 ----------------------------------------------------
    procedure Put(A_Bird : in Bird_Type'Class);

private

    type Bird_Type is
          tagged record
            My_Name : String(1..6);
          end record;

end Bird_Package;
]0;chan@chan:~/Sources/school/214/labs/10/ada[chan@chan ada]$ cat bird_package.ads[Kb
-- bird_package.adb gives Bird-related definitions
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Chan Kim (ck45)
-- Date: 4/20/2018
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Bird_Package is


 ----------------------------------------------------
 -- initialization                                  -
 -- Receive: A_Bird, a Bird_Type;                   -
 --          Name, a String                         -
 -- Return: a Bird_Type in which My_Name = Name.    -
 ----------------------------------------------------
   procedure Init(A_Bird : out Bird_Type; Name : in String) is
   begin
    A_Bird.My_Name := Name;
   end Init;
 ----------------------------------------------------
 -- Name accessor                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: A_Bird.My_Name.                         -
 ----------------------------------------------------
   function Name(A_Bird : in Bird_Type) return String is
   begin
    return A_Bird.My_Name;
   end Name;
 -- A Bird's Call                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: a default bird-call ("Squawk!").        -
 ----------------------------------------------------
   function Call(A_Bird : in Bird_Type) return String is
   begin
    return "Squawwwwwwk!";
   end Call;
 ----------------------------------------------------
 -- Determine type of a Bird (for derived types)    -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: "Bird".                                 -
 ----------------------------------------------------
   function Type_Name(A_Bird : in Bird_Type) return String is
   begin
    return "Bird";
   end Type_Name;
 ----------------------------------------------------
 -- Output a Bird                                   -
 -- Receive: A_Bird, a Bird or subclass of Bird.    -
 -- Output: Everything known about A_Bird           -
 ----------------------------------------------------
   procedure Put(A_Bird : in Bird_Type'Class) is
   begin
    Put( Name(A_Bird) );
    Put( ' ' );
    Put( Type_Name(A_Bird) );
    Put( " says " );
    Put( Call(A_Bird) );
   end Put;
end Bird_Package;]0;chan@chan:~/Sources/school/214/labs/10/ada[chan@chan ada]$ cat bird_package.adb[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kcat duck_package.ads
-- duck_package.ads gives Duck-related declarations,
--
--  and derives Duck from Bird.
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Chan Kim (ck45)
-- Date: 4/20/2018
---------------------------------------------------

with Bird_Package; use Bird_Package;

package Duck_Package is

    type Duck_Type is new Bird_Type with private;
 ----------------------------------------------------
 -- A Duck's Call (Over-rides Bird.Call())          -
 -- Receive: A_Duck, a Duck_Type.                   -
 -- Return: "Quack!"                                -
 ----------------------------------------------------
    function  Call(A_Duck : in Duck_Type) return String;

 ------------------------------------------------------------
 -- Determine type of a Duck (Over-rides Bird.Type_Name()) -
 -- Receive: A_Duck, a Duck_Type.                          -
 -- Return: "Duck".                                        -
 -----------------------------------------------------------
    function  Type_Name(A_Duck : in Duck_Type) return String;

private

     type Duck_Type is new Bird_Type with
          record
            null;
          end record;
          
end Duck_Package;
]0;chan@chan:~/Sources/school/214/labs/10/ada[chan@chan ada]$ cat duck_package.ads[Kb
-- duck_package.adb gives Duck-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Chan Kim (ck45)
-- Date: 4/20/2018
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Duck_Package is

 ----------------------------------------------------
 -- A Duck's Call (Over-rides Bird.Call())          -
 -- Receive: A_Duck, a Duck_Type.                   -
 -- Return: "Quack!"                                -
 ----------------------------------------------------
   function Call(A_Duck : in Duck_Type) return String is
   begin
    return "Quack!";
   end Call;

 ------------------------------------------------------------
 -- Determine type of a Duck (Over-rides Bird.Type_Name()) -
 -- Receive: A_Duck, a Duck_Type.                          -
 -- Return: "Duck".                                        -
 -----------------------------------------------------------
   function Type_Name(A_Duck : in Duck_Type) return String is
   begin
    return "Duck";
   end Type_Name;

end Duck_Package;
]0;chan@chan:~/Sources/school/214/labs/10/ada[chan@chan ada]$ cat goose_package.ads
-- goose_package.ads gives Goose-related declarations,
--
--  and derives Goose from Bird.
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Chan Kim (ck45)
-- Date: 4/20/2018
---------------------------------------------------

with Bird_Package; use Bird_Package;

package Goose_Package is

    type Goose_Type is new Bird_Type with private;

 ----------------------------------------------------
 -- A Goose's Call (Over-rides Bird.Call())         -
 -- Receive: A_Goose, a Goose.                      -
 -- Return: "Honk!"                                 -
 ----------------------------------------------------
    function  Call(A_Goose : in Goose_Type) return String;

 -----------------------------------------------------
 -- Determine type of a Goose                        -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: A_Goose, a Goose.                       -
 -- Return: "Goose".                                 -
 -----------------------------------------------------
    function  Type_Name(A_Goose : in Goose_Type) return String;

private

     type Goose_Type is new Bird_Type with
          record
            null;
          end record;

end Goose_Package;
]0;chan@chan:~/Sources/school/214/labs/10/ada[chan@chan ada]$ cat goose_package.ads[Kb
-- goose_package.adb gives Goose-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Chan Kim (ck45)
-- Date: 4/20/2018
---------------------------------------------------

package body Goose_Package is

 ----------------------------------------------------
 -- A Goose's Call (Over-rides Bird.Call())         -
 -- Receive: A_Goose, a Goose_Type.                 -
 -- Return: "Honk!"                                 -
 ----------------------------------------------------
    function Call(A_Goose : in Goose_Type) return String is
    begin
     return "Honk!";
    end Call;

 -----------------------------------------------------
 -- Determine type of a Goose                        -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: A_Goose, a Goose_Type.                  -
 -- Return: "Goose".                                 -
 -----------------------------------------------------
    function Type_Name(A_Goose : in Goose_Type) return String is
    begin
     return "Goose";
    end Type_Name;

end Goose_Package;
]0;chan@chan:~/Sources/school/214/labs/10/ada[chan@chan ada]$ cat goose_package.adb[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Kcat owl_package.ads
-- owl_package.ads gives Owl-related declarations,
--  and derives Owl from Bird.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Chan Kim (ck45)
-- Date: 4/20/2018
---------------------------------------------------

with Bird_Package; use Bird_Package;

package Owl_Package is

    type Owl_Type is new Bird_Type with private;

 ----------------------------------------------------
 -- A Owl's Call (Over-rides Bird.Call())           -
 -- Receive: An_Owl, an Owl_Type.                   -
 -- Return: "Whoo!"                                 -
 ----------------------------------------------------
    function  Call(A_Owl : in Owl_Type) return String;

 -----------------------------------------------------
 -- Determine type of a Owl                          -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Owl, an Owl_Type.                    -
 -- Return: "Owl".                                   -
 -----------------------------------------------------
    function  Type_Name(A_Owl : in Owl_Type) return String;

private

    type Owl_Type is new Bird_Type with
          record
            null;
          end record;

end Owl_Package;
]0;chan@chan:~/Sources/school/214/labs/10/ada[chan@chan ada]$ cat owl_package.ads[Kb
-- owl_package.adb gives Owl-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Chan Kim (ck45)
-- Date: 4/20/2018
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Owl_Package is


 ----------------------------------------------------
 -- A Owl's Call (Over-rides Bird.Call())           -
 -- Receive: An_Owl, an Owl_Type.                   -
 -- Return: "Whoo!"                                 -
 ----------------------------------------------------
    function Call(A_Owl : in Owl_Type) return String is
    begin
     return "Whoo!";
    end Call;

 -----------------------------------------------------
 -- Determine type of a Owl                          -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Owl, an Owl_Type.                    -
 -- Return: "Owl".                                   -
 -----------------------------------------------------
    function Type_Name(A_Owl : in Owl_Type) return String is
    begin
     return "Owl";
    end Type_Name;

end Owl_Package;
]0;chan@chan:~/Sources/school/214/labs/10/ada[chan@chan ada]$ ./birds 
\nWelcome to the Bird Park!\nTweety Bird says Squawwwwwwk!
Donald Duck says Quack!
Mother Goose says Honk!
Woodsy Owl says Whoo!

]0;chan@chan:~/Sources/school/214/labs/10/ada[chan@chan ada]$ exit
exit

Script done on 2018-04-20 05:12:01-0400
Script started on 2018-04-20 05:12:15-0400
]0;chan@chan:~/Sources/school/214/labs/10/ruby[chan@chan ruby]$ cat Birds.rb 
# birds.rb | Tests out the menagerie of bird classes.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Chan Kim (ck45)
# Date: 4/20/2018
######################################################

require './Bird.rb'
require './Duck.rb'
require './Goose.rb'
require './Owl.rb'

puts "\nWelcome to the Bird Park!\n\n"

bird0 = Bird.new "Hawkeye"
bird0.print

bird1 = Duck.new "Donald"
bird1.print

bird2 = Goose.new "Mother"
bird2.print

bird3 = Owl.new "Woodsey"
bird3.print

puts "\n\n"]0;chan@chan:~/Sources/school/214/labs/10/ruby[chan@chan ruby]$ cat Bird.rb 
# Bird.rb | Defines a Bird superclass 
#   to be extended by specific bird sub-classes.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Chan Kim (ck45)
# Date: 4/20/2018
####################################################

class Bird

    attr_reader :name
  
    def initialize(name)
      @name = name
    end

    def call
        'Squaaaaaaawk!'
    end
    
    def className
        self.class.to_s
    end
    
    def print
        puts name + className + " says " + call
    end

  end]0;chan@chan:~/Sources/school/214/labs/10/ruby[chan@chan ruby]$ cat Duck.rb 
# Duck.rb | Defines the Duck class which inherits attributes and methods
#   from the Bird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Chan Kim (ck45)
# Date: 4/20/2018
####################################################

require './Bird.rb'

class Duck < Bird

    def call
        'Quack!'
    end

end]0;chan@chan:~/Sources/school/214/labs/10/ruby[chan@chan ruby]$ cat Goose.rb 
# Goose.rb | Defines the Goose class which inherits attributes and methods
#   from the Bird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Chan Kim (ck45)
# Date: 4/20/2018
####################################################

require './Bird.rb'

class Goose < Bird

    def call
        'Honk!'
    end

end]0;chan@chan:~/Sources/school/214/labs/10/ruby[chan@chan ruby]$ cat O[K[K Owl.rb 
# Owl.rb | Defines the Owl class which inherits attributes and methods
#   from the Bird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Chan Kim (ck45)
# Date: 4/20/2018
####################################################

require './Bird.rb'

class Owl < Bird

    def call
        'Whoo-hoo'
    end

end]0;chan@chan:~/Sources/school/214/labs/10/ruby[chan@chan ruby]$ ruby Birds.rb 

Welcome to the Bird Park!

HawkeyeBird says Squaaaaaaawk!
DonaldDuck says Quack!
MotherGoose says Honk!
WoodseyOwl says Whoo-hoo


]0;chan@chan:~/Sources/school/214/labs/10/ruby[chan@chan ruby]$ exit
exit

Script done on 2018-04-20 05:12:50-0400
;;; lab10.el examines Lambda Functions in Emacs-LISP .
;;;
;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;; Completed by: Chan Kim (ck45)
;;; Date: 4/20/2018

;;; Part 1
(lambda (x) (+ x x)   )
(lambda (x) (+ x x))

((lambda (x) (+ x x)) 17)
34

;;; Exercise 1a:
(lambda (w x y z) (max (abs w) (abs x) (abs y) (abs z)))
(lambda (w x y z) (max (abs w) (abs x) (abs y) (abs z)))

((lambda (w x y z) (max (abs w) (abs x) (abs y) (abs z))) 1 2 3 4)
4

;;; Exercise 1b:
(lambda (x y z) (+ x y z))
(lambda (x y z) (+ x y z))

((lambda (x y z) (+ x y z)) 1 2 3)
6

(lambda (x) (null x))
(lambda (x) (null x))

((lambda (x) (null x)) 1)
nil

(lambda () 17.2)
(lambda nil 17.2)

((lambda () 17.2))
17.2

;;; Part 2
(function abs)
abs

#'abs
abs

(setq double (function (lambda (x) (+ x x)) ))
(lambda (x) (+ x x))

(double 11)

(funcall double 11)      ; should produce 22
22

(setq triple (function (lambda (x) (+ x x x)) ))
(lambda (x) (+ x x x))

(triple 11)

(funcall triple 11)      ; should produce 33
33


(apply '+ '(1 2 3))    ; should return 6
6

(apply '+ 1 2 '(3 4 5))
15

(apply '+ 1 '(3 4 5) 2)

(funcall '+ 1 2 3 4)
10

(funcall 'cons 'a '(b))
(a b)

(mapcar 'evenp '(1 2 3 4))

(mapcar 'oddp '(1 2 3 4))

(mapcar 'abs '(-1 2 -3 4 -5))
(1 2 3 4 5)

(defun subtract-n (n list)
    (mapcar '(lambda (x) (- x n)) list))
subtract-n

(subtract-n 2 '(2 4 6))
(0 2 4)

;;; Exercise 2:
(defun sum-squares (list)
    (apply #'+ (mapcar #'(lambda (x) (* x x)) list)))
sum-squares

(sum-squares '(1 2 3))          ; should return 14
14

(sum-squares '(1 2 3 4 5))      ; should return 55
55

(sum-squares '(-1 -2 -3 0 1))   ; should return 15 
15
